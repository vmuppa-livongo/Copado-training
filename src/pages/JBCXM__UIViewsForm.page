<apex:page Controller="JBCXM.UIViewsController" extensions="JBCXM.GSCommonBroker" sidebar="false" title="UI Views" tabStyle="Administration__tab">
    <!-- Static Resource Includes: Jquery,Jqgrid,Character limit plugin and css files -->
    <apex:includeScript value="{!JSENCODE(URLFOR($Resource.JBCXM__GSVendor,'js/vendor/jquery/jquery-1.10.2.min.js'))}" />
    <apex:includeScript value="{!JSENCODE(URLFOR($Resource.JBCXM__GSVendor,'js/vendor/jquery/jquery-UI-1.10/js/jquery.ui.min.js'))}"/>
    <apex:includeScript value="{!JSENCODE(URLFOR($Resource.JBCXM__GSVendor,'js/vendor/jquery/jquery-migrate-1.2.1.min.js'))}" />
    <script src="{!JSENCODE(URLFOR($Resource.CustomJS, 'CustomJS/date.format.js'))}" />
    <script src="{!JSENCODE(URLFOR($Resource.CustomJS, 'CustomJS/jbaraCustomUtility.js'))}" />
    <apex:includeScript value="{!JSENCODE(URLFOR($Resource.JBCXM__GSVendor,'js/vendor/underscore-min.js'))}"/>
    <script src="{!JSENCODE(URLFOR($Resource.GSVendor, 'js/vendor/multiple-select/jquery.multiple.select.js'))}"></script>

    <apex:stylesheet value="{!JSENCODE(URLFOR($Resource.JBCXM__JQuery, 'css/redmond/jquery-ui-1.8.11.custom.css'))}"/>
    <apex:stylesheet value="{!JSENCODE(URLFOR($Resource.JBCXM__appStyles,'main.css'))}"/>
    
    <link   href="{!JSENCODE(URLFOR($Resource.GSVendor, 'js/vendor/multiple-select/multiple-select.css'))}" rel="stylesheet" type="text/css" />
    
    <link   href="{!JSENCODE(URLFOR($Resource.GSVendor, 'js/vendor/multiple-select/jquery.multiselect.filter.css'))}" rel="stylesheet" type="text/css" />
    
    <apex:stylesheet value="{!JSENCODE(URLFOR($Resource.JBCXM__GSAppCSS, 'css/CS360/gsApps-new.css'))}"/>

    <!-- <link rel="stylesheet" type="text/css" href="https://localhost/GS1-UI/GSAppCSS/css/CS360/gsApps.css"/> --> 
    <apex:stylesheet value="{!JSENCODE(URLFOR($Resource.JBCXM__Styles, 'css/core/gsAppContainer.css'))}" />
    <script>
        var GS = GS || {};
        GS.userConfig = {
            userLocale  : {!(dateTimeFormatByLocale)},
            userName    : "{!$User.FirstName}"+" "+"{!$User.LastName}",
            userId      : "{!$User.Id}",
            emailId     : "{!$User.Email}",
            profilePhoto : "{!(profilePhoto)}",
            userDisplayName : "{!(userDisplayName)}",
            gainsightTabs: {!(gainsightTabs)},
            isLightningEnabled: {!(isLightningEnabled)}
        };
        GS.commonRemotingEndPoint     = '{!$RemoteAction.GSCommonBroker.gsCommonRequestBroker}';
        GS.remotingEndPoint           = '{!$RemoteAction.GSCommonBroker.gsCommonRequestBroker}';
        GS.packageNS            = "{!(pkgNS)}";
        GS.isPackagedInstance   = (GS.packageNS) ? "true" : "false";
    </script>

    
    
    <apex:outputpanel rendered="{!If($CurrentPage.parameters.env == null , true, false)}">
        <c:AlertForm />
        <script>
            installResources({scripts: ["appcontainer/scripts/appcontainer.bundle.js"], styles:[]});
        </script>
    </apex:outputpanel>
  
    
    <apex:outputpanel rendered="{!If($CurrentPage.parameters.env == "dev" , true, false)}">
            <script src="https://localhost:9091/UI/appcontainer/scripts/appcontainer.bundle.js" async = "true"/>
    </apex:outputpanel>

    <style>
        .moveUpIconClass{
            background:url("{!URLFOR($Resource.SurveyImg)}/Icons/a_up_act.png") no-repeat center center;
            height:16px;
            width:16px;
            display:inline-block;
        }
        .moveTopIconClass{
            background:url("{!URLFOR($Resource.SurveyImg)}/Icons/go-top-3.png") no-repeat center center;
            height:16px;
            width:16px;
            display:inline-block;
        }
        .moveDownIconClass{
            background:url("{!URLFOR($Resource.SurveyImg)}/Icons/a_down_act.png") no-repeat center center;
            height:16px;
            width:16px;
            display:inline-block;       
        }
        .moveBottomIconClass{
            background:url("{!URLFOR($Resource.SurveyImg)}/Icons/go-bottom-3.png") no-repeat center center;
            height:16px;
            width:16px;
            display:inline-block;
        }
        .moveUpDownIconClass{
            background : url("{!URLFOR($Resource.SurveyImg)}/Icons/dragupdown.png") no-repeat center center;
            height:16px;
            width:16px;
            display:inline-block;       
        }
         .diffColor{
            background-color:#CFEEF8;
         }
         .dateFormat{
            display:none;
        }
       .ddOperatorClass {
            width: 150px;
        }
        select{border-color: #DFDFDF;
            border-radius: 3px;
            padding: 4px;
        }
        .removeSelectedFieldClass {
            background:url("/img/func_icons/remove12_on.gif") no-repeat;
            background-position:center;
            padding:10px;
            text-decoration:none;
            cursor:pointer;        
        }
        .ui-multiselect {
            width: 225px !important;
            line-height:19px;
            border: 0 !important;
            border-bottom: 1px solid #d3d6d9 !important;
            border-radius: 0 !important;
        }
        
        .ui-widget-header .ui-multiselect-filter input{
            font-size: 13px;
            padding-left: 3px !important;
            width:98% !important;
        }
        .pbSubheader.first.tertiaryPalette{
            background: #f0f3f6 !important;
        }
        .ddColumnFilterInput{
            background: url("{!URLFOR($Resource.GSAppCSS)}/images/report/search_orange.png") no-repeat scroll right center #FFFFFF;
            margin: 5px 0;
        }
        .requiredField{
            background-color: #CC0000;
            bottom: 0px;
            height: 23px;
            left: -4px;
            position: absolute;
            top: 0px;
            width: 3px;
        }
  
        body .bPageBlock, body #bodyCell .bResource .secondaryPalette, body .secondaryPalette.bPageBlock{
           background-color: #FFF;
           border-radius: 3px;
           border: 0;
           padding-bottom:7px;
     }
     .bPageBlock .detailList tr td, .bPageBlock .detailList tr th,
     .hoverDetail .bPageBlock .detailList tr td, .hoverDetail .bPageBlock .detailList tr th {
         border-bottom:none;
     }
     .tdlabel{
         min-width:380px;
         max-width:380px;
     }
     .tdDescription{
         min-width:300px;
         max-width:300px;
         position:fixed;
     }
     .apexp{margin: 20px !important;}
     .apexp .bPageBlock .detailList {
         width: 100%;
     }
     .apexp .bPageBlock .detailList td{
         height:10px;
     }
     #gs-app-container .gs-module-container{
         background-color: #f0f3f6;
     }
     .ui-tabs .ui-tabs-panel{
         padding-left:3em;
         background-color: #f0f3f6;
     }
     .listViewport .subNav .linkBar {
         background-color: #ffffff;
         border-top: none;
     }
     .bPageBlock.brandSecondaryBrd{
            border:0 !important;
            background: #fff;
      }
     .pbHeader{
          background: #f0f3f6 !important;
          border:none !important;
      }
      .pbHeader table{
          border: none !important;    
      }
      .pbBody{
          margin: 0 !Important;
      }
      .pbBody table{
          border: none !important;
      }
      .pbBody table th{
          height: 40px;
          background-color: #fff !important;
          border:0 !Important;
          border-bottom: 2px solid #d3d6d9 !important;
          font-size: 15px !important;
          padding: 0 10px !important;
      }
      .pbBody table tbody tr{
          height: 30px;
      }
      tr.uiViewSelectedFieldsHeaderRow{
          background: #fff !important;
          border: 0 !important;
          border-bottom: 1px solid #d3d6d9 !important;
      }
      .pbBody td{padding: 9px !important;}
      .btn, .btnDisabled {
          display: inline-block; 
          line-height: 18px; 
          cursor: pointer;
          background: #00b4e5 !important;
          padding: 6px 15px !important;
          color: #fff !important;
          font-weight: normal !important;
          text-transform: uppercase !important;
          border: 0 !important;
          height: 30px !important;
          font: 15px "Proxima Nova Rg",sans-serif !important;
      }    
      .btnDisabled, .dummyAllAdminNewBtn.btnDisabled{
          background-color:#d9e0e9 !important;
          pointer-events: none;
          opacity:0.7 !important;
      }
      .btn:hover{
          opacity: 0.7;
          border-radius: 3px;
      }
      .btn.btnCancelClick{
          background-color: #fff !important;
          border: 1px solid #d3d6d9 !important;
          color: #374353 !important;
       }
      .pbBody table th.labelCol.vfLabelColTextWrap{
          border-bottom: 0 !important;
          font-size: 14px !important;
          font-weight:normal !important;
          font-family: "Proxima Nova Semibold";
      }
      input{
         height: 25px !important;
         border: 0;
         border-bottom: 1px solid #d3d6d9;
         margin-left: 5px;    
      }
      .pbBottomButtons table tr td:first-child{
         display: none;
      }
      select, select[multiple][size="1"] {
            height: 25px;
            background-color: transparent;
            border: none;
            border-bottom: 1px solid #d3d6d9;
            border-radius: 0;
            outline: none;
            font-weight:normal;
            font-size: 14px;
            margin: 0;
            padding: 0;
            box-shadow: none;
            box-sizing: border-box;
            transition: all 0.3s ease;
            width: auto;
            color: #374353; 
       }
        select[multiple] {
            height: auto;
        }
        table.multiSelectPicklistTable tr:first-child {
            display: none;
        }
        table.multiSelectPicklistTable td {
            padding-top: 0px !important;
        }
        #tblUIViewSelectedFields .uiViewSelectedFieldsTBody tr td:nth-child(3) {
            text-align: center;
        }
        .errorM3 td {
            padding: 0 0 0 10px !important;
        }
        .errorM3 h4 {
            margin: 0px !important;
        }
    </style>
    <script type="text/javascript">
        var j$ = jQuery;
        j$.trim = function(input) {
          if(typeof input !== "string") {
            return input + "";
          } else {
            return input.trim();
          }
        }
        window.jLatest = j$;
     
        var displaySeprator =':::';
        var maxAccountFieldsLimit=10;
        var maxSurveyParticipantsFieldsLimit=10;
        var maxFiltersLimit=10;
        var fldNameToGetNameSpace;
        var strNameSpace;
        var jsonFieldsList;
        var strHTML;
        var fldObjectName;
        var selectedFieldItem;
        var fldObjectNameId;
        var fldNameId;
        var filterItemValue;
        var viewId;
        var ddObjFilterFields;
        var ddReportParamFilterFields;
        var selectedFld;
        var userLocaleDateFormatMap;
        var jbaraObjectLabels = {'CustomerInfo__c':'Customer','TransHeader__c':'Transaction','SurveyResponse__c':'NPS','UsageData__c': 'Adoption','CTA__c': 'CTA'};
        var linkedToSectionFlag = 'false', sectionIdAvailableFlag = 'false';
        var fieldsList = [];

         j$(document).ready(function() {

            viewId='';
            userLocaleDateFormatMap =eval({!(userLocaleDateFormatMap)});
            fldNameToGetNameSpace ="{!($ObjectType.UIViews__c.Fields.UITabName__c.Name)}";
            strNameSpace =   getJbaraNameSpace(fldNameToGetNameSpace,'UITabName__c');     
            j$(".ddTabsList").unbind("change").bind("change",function(){
                j$("#jBaraUIViewValidationsContainer").hide();
                if(j$(".ddTabsList").val()==''){
                    hideUIViewOtherSections();
                    j$(".btnSaveClick").attr("disabled","disabled");
                    j$(".btnSaveClick").removeClass("btn").addClass("btnDisabled");
                    j$(".btnSaveAsClick").hide();
                    
                }
                else {
                    uiTabChange();
                }
            });
            
                       
           
            j$(".dummyOperatorFields").live("change", function() {
                if(j$(this).closest(".trMainFilterRow").find(".filterFieldTypeClass").val() == 'PICKLIST') {
                    var cs = j$(this)
                    if(cs.val() == 'u' || cs.val() == 'x') {
                        cs.parent().next().find("select:eq(0)").attr("multiple","multiple").attr('size',4);
                    }
                    else {
                        cs.parent().next().find("select:eq(0)").val("").removeAttr("multiple").attr('size',1);
                    }
                }
                var check = j$(this).closest(".trMainFilterRow").find(".tdFilterNullCheck input")
                 if(check.length > 0){
                     check.removeAttr("checked");
                     j$(this).closest(".trMainFilterRow").find(".tdFilterValue .filterFieldClass").removeAttr("disabled");
                     j$(this).closest(".trMainFilterRow").find(".tdFilterValue .filterFieldClass").parent().find("input").removeAttr("disabled");
                       if(j$(this).val().toUpperCase() == 'E' || j$(this).val().toUpperCase() == 'N' ){
                            check.show();
                        }else{
                             check.hide();
                        }
                      if(j$(this).val().toUpperCase() == 'E' && check.next('.nullCheckTitle').attr('data-title')){
                            check.attr("title",'Include records where ' + check.next('.nullCheckTitle').attr('data-title') + ' is null')
                      }
                      if(j$(this).val().toUpperCase() == 'N' && check.next('.nullCheckTitle').attr('data-title')){
                            check.attr("title",'Exclude records where ' + check.next('.nullCheckTitle').attr('data-title') + ' is null');
                      }
                  }
            });
            //filter nullcheck change
             j$(".tdFilterNullCheck input").live("change", function() {
                 var filterVal = j$(this).closest(".trMainFilterRow").find(".tdFilterValue .filterFieldClass");
                 if(j$(this).is(":checked")){
                     j$(this).attr("checked","checked");
                     if(filterVal.is('select')){
                        filterVal.parent().find("input").attr("disabled","disabled");
                        filterVal.parent().find("input").val("")
                     }
                     filterVal.val("");
                     filterVal.attr("disabled","disabled");
                 }else{
                    j$(this).removeAttr("checked");
                     filterVal.removeAttr("disabled");
                     filterVal.parent().find("input").removeAttr("disabled");
                 }

             });
            //JB-2447
            //default select also you shud chk
            if('{!(isSectionIdAvailable)}' == 'true') {            
                uiTabChange();
                j$(".ddTabsList").attr("disabled","disabled");
                j$(".ddTabsList").multiselect("disable");
            }
                        
            j$("#tblUIViewSelectedFields .objFieldLabelsTD").live("click",function() {
                j$(this).parent("tr").toggleClass("diffColor", this.clicked);
            });
             j$("#tblUIViewSelectedFields tbody.uiViewSelectedFieldsTBody").sortable({ 
                    containment: 'parent',
                    axis:'y',
                    handle:'.moveUpDownSelectedFieldIcon',
                    cursor: 'move',
                    helper: function(e, tr)
                    {
                        var $originals = tr.children();
                        var $helper = tr.clone();
                        $helper.children().each(function(index)
                        {
                          // Set helper cell sizes to match the original sizes
                          j$(this).width($originals.eq(index).width())
                        });
                        return $helper;
                    }
             
              });
            j$(".ddFilterFields").live("change",function() {
                //constructUIFilterRowItems(j$(this));
                    j$(this).parent().next().html("Loading.....");
                    j$(this).parent().next().next().html("Loading.....");
                    ddObjFilterFields = j$(this);
                    selectedFld =j$(this).val().split('^');
                    actAdvanceGetSelectedField(selectedFld[0],selectedFld[1]);
            }); 
            
            j$(".ddReportParamFields").live("change",function() {
                var labelText='';
                if(j$(this).val()=='') {
                    j$(this).parent().next().find(".selectedReportParamLabel").val(labelText);
                }
                else {
                    labelText = j$(this).find('option:selected').text().split(displaySeprator)[1];
                    j$(this).parent().next().find(".selectedReportParamLabel").val(labelText);
                }
                j$(this).parent().parent().find(".tdFilterOperator ").html("Loading.....");
                j$(this).parent().parent().find(".tdFilterValue  ").html("Loading.....");
                ddReportParamFilterFields =j$(this);
                selectedFld =j$(this).val().split('^');
                actAdvanceReportGetSelectedField(selectedFld[0],selectedFld[1]);
            });

            if('{!(viewId)}'!=''){
                viewId = '{!(viewId)}';
                populateViewDetails();
            }
            else {
                if('{!(hasCustomer360View)}'=='true'){
                    j$(".ddTabsList").find("option[value='Customer360']").remove();
                }
                if('{!(hasNPSView)}'=='true'){
                    j$(".ddTabsList").find("option[value='NPS']").remove();
                }
                if('{!(hasCases)}'=='false'){
                    j$(".ddTabsList").find("option[value='Cases']").remove();
                }
                if('{!(hasSurveyDetailReportView)}' == 'true') {
                    j$(".ddTabsList").find("option[value='SurveyDetailReport']").remove();
                }
                if('{!(hasSurveyParticipants)}' == 'true') {
                    j$(".ddTabsList").find("option[value='SurveyParticipants']").remove();
                }
                j$(".btnSaveClick").attr("disabled", true);
                j$(".btnSaveClick").removeClass("btn").addClass("btnDisabled");
                j$(".btnSaveAsClick").hide();
            }
            
           j$(".ddColumnFilterInput").live("keyup", performFilter);
           j$(".icon-circle-close").hide();

            /*if('{!(isAccAttributeExistInC360Section)}' == 'true'){
                 j$(".ddTabsList").find("option[value='Customer360']").remove();
            }  */         
           j$(".ddTabsList").multiselect({  header:true, multiple: false,
                                                     noneSelectedText: "Select an Option",
                                                    selectedList: 1
                                                }).multiselectfilter({
                                                      label:'',
                                                      placeholder:'Type filter text',
                                                      autoReset:true
                                                     });
            j$(".ui-multiselect-close").hide();
            j$("html,body").animate({scrollTop:0});
         });
         
        function performFilter(){
       
            var filterText = j$( this ).val();
            var  pattern = new RegExp(filterText, 'gi');
            
            if(filterText == "") { 
                populateList(fieldsList);
        
           }else{
            
                var filteredList = [];
                
                for(var i = 0 ; i<fieldsList.length; i++){
                
                    if(  fieldsList[i].label.search(pattern) > -1 )
                        filteredList.push({value:fieldsList[i].value, label:fieldsList[i].label})
            
                }
                populateList(filteredList);             
            }
        }
        function populateList(list){
        
            var selectedFields = [];
            var fieldsSelectBox = j$("#ddColumnSelectorList");
            var selectedList = j$(".objFieldLabelsTD");
            
            for(var i = 0 ; i<selectedList.length; i++)
                selectedFields.push(selectedList.eq(i).text());
                
            fieldsSelectBox.empty();
            for(var i = 0 ; i <list.length; i++){
                if(!(selectedFields.indexOf(list[i].label) >= 0))
                    fieldsSelectBox.append(j$("<option value='"+list[i].value+"'></option>").text(list[i].label));
            }
        }
        function timeFrameDateRangeChanges(selValue,thisPrt){
            j$(thisPrt).parent().find('.dateHtmlDiv').html('');
            var sectionId= j$(thisPrt).parent().parent().parent().parent().parent().parent().attr("id");
            var dateHtml = '';
            if(selValue == 'JBcustom'){//onchange="funCallWhenDateChange()"
                dateHtml  = '<div style="margin-top:5px;" class="dateHtmlDiv"><label for="tf_s">From: </label><span class="dateInput dateOnlyInput"><input type="text" size="9" onfocus="jbaraTFDateInputControl(this)"  maxlength="10" class="jbaraDummyTimeFrameStartDateInput"  id="jbaraDummyTimeFrameStartDateInput'+ sectionId+ j$(thisPrt).attr("dummydateattrindex") + '" style="width: 5em;" data-uidsfdc="8"></span>';
                dateHtml += '<label for="tf_e">To: </label><span class="dateInput dateOnlyInput"><input type="text" size="9" onfocus="jbaraTFDateInputControl(this)"  maxlength="10" class="jbaraDummyTimeFrameEndDateInput" id="jbaraDummyTimeFrameEndDateInput'+ sectionId+ j$(thisPrt).attr("dummydateattrindex") + '" style="width: 5em;"> </span>';
                dateHtml += '</div>';
            }else{
                dateHtml = ''
            }
            j$(thisPrt).parent().append(dateHtml);
        }
        
        function hideDDValues(fl, $ele) {
            if(fl == 'cu') {
                
                $ele.find(".ddOperatorClass option[value='c'], .ddOperatorClass option[value='s'], .ddOperatorClass option[value='k']").hide().attr('disabled', 'disabled');
                
            }
            else if(fl == 'ou') {
                
                $ele.find(".ddOperatorClass option[value='c'], .ddOperatorClass option[value='s'], .ddOperatorClass option[value='k']").show().removeAttr('disabled');
            } 
        } 
        
        function changeUserLookupType(thisPtr, $dEle) {
            $dEle.find(".ddOperatorClass").val('e');
            if(j$(thisPtr).val() == 'ou') {
                j$(thisPtr).next().show();
                hideDDValues('ou', $dEle);
            }
            else {
                j$(thisPtr).next().hide();
                hideDDValues('cu', $dEle);
            }
        }
        
        //Popup the date picker to display on form.
        function jbaraTFDateInputControl(thisPointer) {
            j$("#datePicker").css({'z-index': '7001'});
            DatePicker.pickDate(true, thisPointer.id, false);
        } 
         function showSelectedFields(){

            constructUIFilterRowItems(ddObjFilterFields);
         }
         
         function showReportParamSelectedFields(){
            constructUIFilterRowItems(ddReportParamFilterFields);
            //removeNotEqualOperatorForDates("tbodyReportParamContainer");
         }
         
         function removeNotEqualOperatorForDates(bodyId){
            j$("#"+ bodyId).find(".trMainFilterRow").each(function(){
                if(j$(this).find(".filterFieldTypeClass").val()=='DATE' || j$(this).find(".filterFieldTypeClass").val()=='DATETIME'){
                    j$(this).find(".dummyOperatorFields option[value='n']").remove();
                }
            });
         }       
         function hideUIViewOtherSections(){
            j$("#divViewNameSelector").hide();
            j$("#divFilterSelector").hide();
            j$("#divReportParamSelector").hide();
            j$("#divFieldsSelector").hide();
            j$("#divSharingSelector").hide();
         }
         
         function showUIViewOtherSections(){
            j$("#divFilterSelector").find("h3").html('Step 3. Specify Filter Criteria');
            j$("#divReportParamSelector").find("h3").html('Step 4. Specify Report Params');
            j$("#divFieldsSelector").find("h3").html('Step 5. Select Fields to Display');
            j$("#divReportParamSelector").show();
           
            j$("#divSharingSelector").find("h3").html('Step 6. Restrict Visibility');
            j$("#divViewNameSelector").show();
            j$("#divFilterSelector").show();
            
            j$("#divFieldsSelector").show();
            //To be shown when we add sharing permission
            //j$("#divSharingSelector").show();
         }
         
         function addUIViewFields(){
            if(j$("#ddColumnSelectorList option:selected").length>0){
                var blnFieldsExceeded=false;
                var tempFieldsArray= new Array();
                 j$("#ddColumnSelectorList option:selected").each(function () {
                        var fldId= j$(this).val();
                        fldObjectNameId =fldId.split('^')[0];
                        fldNameId =fldId.split('^')[1];
                        selectedFieldItem= j$.grep(jsonFieldsList, function(dt) {
                            return (dt.fName == fldNameId && dt.fObjectName==fldObjectNameId);
                        });
                        if(j$(".ddTabsList").val() == 'SurveyParticipants' || j$(".ddTabsList").val() == 'SurveyDetailReport'){
                            if(j$(".uiViewSelectedFieldsTBody").find(".selectedFieldObjectName").length>=maxSurveyParticipantsFieldsLimit){
                                    tempFieldsArray.push(j$(this).val());
                                    blnFieldsExceeded=true;
                                }
                                else {
                                    addUISelectedField(selectedFieldItem,selectedFieldItem[0].fLabel,selectedFieldItem[0].visibilityMode);
                                }   
                        }
                        else{
                             if(fldObjectNameId=='Account' && j$(".ddTabsList").val()!='Customer360'){
                                if(j$(".uiViewSelectedFieldsTBody").find(".selectedFieldObjectName[value='Account']").length>=maxAccountFieldsLimit){
                                    tempFieldsArray.push(j$(this).val());
                                    blnFieldsExceeded=true;
                                }
                                else {
                                    addUISelectedField(selectedFieldItem,selectedFieldItem[0].fLabel,selectedFieldItem[0].visibilityMode);
                                }   
                                 }
                            else {
                                addUISelectedField(selectedFieldItem,selectedFieldItem[0].fLabel,selectedFieldItem[0].visibilityMode);
                            }   
                            
                       }
                       
                  });
                 
                  if(blnFieldsExceeded){
                    for(var mdx=0;mdx<tempFieldsArray.length;mdx++){
                        j$("#ddColumnSelectorList option[value='"+tempFieldsArray[mdx]+"']").removeAttr("selected");
                    }
                    if(j$(".ddTabsList").val()=='SurveyParticipants' || j$(".ddTabsList").val()=='SurveyDetailReport'){
                        alert('Only '+ maxSurveyParticipantsFieldsLimit +" fields can be added");
                    }
                    else{
                        alert('Only '+ maxAccountFieldsLimit +" account fields can be added");
                    }
                  }
                 
                 j$("#ddColumnSelectorList option:selected").remove();
                 
             }
             else {
                alert('Select at least one item from Available Fields');
             }     
         }
         
         function getKey(value) {
            return (value) ?  GS.packageNS+value : value;
         }
         
         function addUISelectedField(selectedFieldItem, changedLabel, visibilityMode) {
            var selUITabName = j$.trim(j$(".ddTabsList").val());
            if(selectedFieldItem[0].fObjectName=='Account') {
                fldObjectName='Account';
            }
            else if(selectedFieldItem[0].fObjectName=='Contact') {
                fldObjectName='Contact';
            }
            else if(selectedFieldItem[0].fObjectName=='SurveyParticipant__c' && (relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c'))) {
                fldObjectName = (selUITabName == 'SurveyDetailReport') ? 'Survey Participant' : ((relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c')) ? 'SurveyParticipant__c' :'Custom');
            }
            else if(selectedFieldItem[0].fObjectName=='{!(caseViewObjectName)}') {
                fldObjectName='{!(caseViewObjectName)}';
            }
            //JB-2447
            else if(selectedFieldItem[0].fObjectName=='{!(relatedObjectName)}') {
                fldObjectName='{!(relatedObjectName)}';
                fldObjectName= fldObjectName.replace('__c','');
                
            }
            else {
                //fldObjectName = ((selUITabName == 'SurveyDetailReport' || selUITabName == 'SurveyParticipants') && selectedFieldItem[0].fObjectName == 'CustomerInfo__c') ? 'CustomerInfo' : 'JBara';
                fldObjectName = (jbaraObjectLabels[selectedFieldItem[0].fObjectName]) ? jbaraObjectLabels[selectedFieldItem[0].fObjectName] : selectedFieldItem[0].fObjectName.replace('__c','');
            }
            strHTML  ='<tr style="cursor:pointer;">'
            strHTML  += '<td class="objFieldLabelsTD">'+fldObjectName + displaySeprator + selectedFieldItem[0].fLabel+'</td>';
            strHTML  += '<td>';
            strHTML  += '<input class="selectedFieldLabel" type="text" size="40px" maxLength="80"/>';
            strHTML  += '<input class="selectedFieldName" type="hidden"/>';
            strHTML  += '<input class="selectedFieldType" type="hidden"/>';
            strHTML  += '<input class="selectedFieldObjectName" type="hidden"/>';
            strHTML  += '<input class="selectedFieldIsGroupable" type="hidden"/>';
            strHTML  += '<input class="selectedFieldHasJBCXM" type="hidden"/>';
            strHTML  += '<input class="selectedFieldDecimalPlaces" type="hidden"/>';
            strHTML  += '</td>';
            strHTML  += '<td><input type="checkbox" class="selectedFieldVisibilityMode"/></td>';
            strHTML  += '<td width="300">';
            strHTML  += '<span class="moveTopIconClass moveTopSelectedFieldIcon" title="Move Top">&nbsp;&nbsp;</span>';
            strHTML  += '<span class="moveUpIconClass moveUpSelectedFieldIcon" title="Move Up">&nbsp;</span>';
            strHTML  += '<span class="moveDownIconClass moveDownSelectedFieldIcon"  title="Move Down">&nbsp;</span>';
            strHTML  += '<span class="moveBottomIconClass moveBottomSelectedFieldIcon" title="Move Bottom">&nbsp;&nbsp;</span>';
            strHTML  += '<span class="moveUpDownIconClass  moveUpDownSelectedFieldIcon" title="Drag Up and Down">&nbsp;</span>';
            strHTML  += '<span class="removeSelectedFieldClass removeSelectedFieldIcon" title="Remove">&nbsp;</span>';
            strHTML  += '</td>';
            strHTML  += '</tr>';
            j$("#tblUIViewSelectedFields").append(strHTML);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldLabel").val(changedLabel);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldName").val(selectedFieldItem[0].fName);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldType").val(selectedFieldItem[0].fDataType);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldObjectName").val(selectedFieldItem[0].fObjectName);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldIsGroupable").val(selectedFieldItem[0].isGroupable);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldHasJBCXM").val(selectedFieldItem[0].hasJBCXMNS);
            j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldDecimalPlaces").val(selectedFieldItem[0].decimalPlaces);
            
            
            if(visibilityMode){
                j$("#tblUIViewSelectedFields").find("tr:last").find(".selectedFieldVisibilityMode").attr("checked","checked");
            }
            j$("#tblUIViewSelectedFields").find("tr:last").find(".removeSelectedFieldIcon").bind("click",function(){
                j$("#tblUIViewSelectedFields").find("tr.diffColor").removeClass("diffColor");
                j$(this).parent().parent().addClass("diffColor");
                removeUIViewFields();
            });
            j$("#tblUIViewSelectedFields").find("tr:last").find(".moveTopSelectedFieldIcon").bind("click",function(){
                j$(".uiViewSelectedFieldsTBody").prepend(j$(this).parent().parent()); 
            });
            
            j$("#tblUIViewSelectedFields").find("tr:last").find(".moveUpSelectedFieldIcon").bind("click",function(){
                var row = j$(this).parents("tr:first");
                if(!row.prev().hasClass("uiViewSelectedFieldsHeaderRow")){
                    row.insertBefore(row.prev());
                }   
            });
            
            j$("#tblUIViewSelectedFields").find("tr:last").find(".moveDownSelectedFieldIcon").bind("click",function(){
                var row = j$(this).parents("tr:first"); 
                row.insertAfter(row.next());
            });
            
            j$("#tblUIViewSelectedFields").find("tr:last").find(".moveBottomSelectedFieldIcon").bind("click",function(){
                j$("#tblUIViewSelectedFields").append(j$(this).parent().parent());
            });
            
         }
         
         function removeUIViewFields(){
            if(j$("#tblUIViewSelectedFields .diffColor").length > 0) {
                var selUITabName = j$.trim(j$(".ddTabsList").val());
                j$("#tblUIViewSelectedFields .diffColor").each(function() {
                    fldObjectName   = '';
                    fldObjectNameId = j$(this).find(".selectedFieldObjectName").val();
                    fldNameId       = j$(this).find(".selectedFieldName").val();
                      selectedFieldItem= j$.grep(jsonFieldsList, function(dt) {
                            return (dt.fName == fldNameId && dt.fObjectName==fldObjectNameId);
                       });
                        if(selectedFieldItem[0].fObjectName == 'Account') {
                            fldObjectName = 'Account';
                        }
                        else if(selectedFieldItem[0].fObjectName == '{!(caseViewObjectName)}') {
                            fldObjectName = '{!(caseViewObjectName)}';
                        }
                        else if(selectedFieldItem[0].fObjectName == 'SurveyParticipant__c' && (relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c'))){
                            fldObjectName = (selUITabName == 'SurveyDetailReport') ? 'Survey Participant' : (relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c')) ? 'SurveyParticipant__c' : 'Custom';
                        }                        
                        //JB-2447
                        else if(selectedFieldItem[0].fObjectName == '{!(relatedObjectName)}') {
                            fldObjectName = '{!(relatedObjectName)}';
                            fldObjectName= fldObjectName.replace('__c','');
                        }
                        else if(selectedFieldItem[0].fObjectName == 'Contact') {
                            fldObjectName = 'Contact';
                        }
                        else {
                            //fldObjectName = ((selUITabName == 'SurveyDetailReport' || selUITabName == 'SurveyParticipants') && selectedFieldItem[0].fObjectName == 'CustomerInfo__c') ? 'CustomerInfo' : 'JBara';
                            fldObjectName = (jbaraObjectLabels[selectedFieldItem[0].fObjectName]) ? jbaraObjectLabels[selectedFieldItem[0].fObjectName] : selectedFieldItem[0].fObjectName.replace('__c','');
                        }
                    strHTML = '<option value="'+ fldObjectNameId+'^'+selectedFieldItem[0].fName +'">'+ fldObjectName + displaySeprator  + selectedFieldItem[0].fLabel +'</option>';
                    j$("#ddColumnSelectorList").append(strHTML);
                    j$(this).remove();
                });
                sortDropDownItems('ddColumnSelectorList');
            }
            else {
                alert('Select at least one item from Selected Fields');
            }
         }
         
         function addUIViewFilterRow(){
                var rowIndex= parseInt(j$("#tbodyFilterContainer").find("tr.trMainFilterRow").length);
                strHTML  ='<tr class="trMainFilterRow">';
                strHTML  +='<td width="240" valign="top">';
                strHTML  += '<select class="ddFilterFields">';
                strHTML  += '<option value="">None</option>';
                strHTML  += j$("#ddHiddenFilterField").html();
                strHTML  += '</select>';
                strHTML  +=' </td>';
                strHTML  +='<td  width="100" class="tdFilterOperator othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='<td  width="200" class="tdFilterValue othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='<td  width="25" class="tdFilterNullCheck othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='</tr>';
                j$("#tbodyFilterContainer").append(strHTML);
                j$("#tbodyFilterContainer").find(".trMainFilterRow").last().find(".ddFilterFields").val("");
                j$("#tbodyFilterContainer").find("tr.trMainFilterRow:eq("+rowIndex+")").find(".ddFilterFields").attr("dummyattrindex",rowIndex+1);
                if(rowIndex>=1){
                    j$("#fRemoveRowLink").show();
                    j$("#fRemoveRowLinkGreyed").hide();
                }
                else {
                    j$("#fRemoveRowLink").hide();
                    j$("#fRemoveRowLinkGreyed").show();
                }
                rowIndex= parseInt(j$("#tbodyFilterContainer").find("tr.trMainFilterRow").length);
                if(rowIndex>=maxFiltersLimit){
                    j$("#fAddRowLinkGreyed").show();
                    j$("#fAddRowLink").hide();
                }
                else {
                    j$("#fAddRowLinkGreyed").hide();
                    j$("#fAddRowLink").show();
                }
            
                   
                j$(".ddFilterFields").multiselect({ header:true, multiple: false,
                                                     noneSelectedText: "Select an Option",
                                                    selectedList: 1
                                                }).multiselectfilter({
                                                      label:'',
                                                      placeholder:'Type filter text',
                                                      autoReset:true
                                                     });
                                                     
                  j$(".ui-multiselect-close").hide();
                
         }
         function constructUIFilterRowItems(objFilter){
                try {
                    
                var uniqueIdx= j$(objFilter).attr("dummyattrindex");
                var existId;
                var newId, fldSelector;
                j$(objFilter).parent().parent().find(".othertds").html("");
                if(j$(objFilter).val().split('^')[0] == "CustomerInfo__c" && j$(objFilter).val().split('^')[1] == "Industry__c") {
                    fldSelector = "CustomerInfo__cIndustry__c";
                }
                //else if(j$(objFilter).val().split('^')[0] == "CustomerInfo__c" && j$(objFilter).val().split('^')[1] == "CurScoreId__c" || j$(objFilter).val().split('^')[1] == "PrevScoreId__c" ) {
                //}
                else {
                       fldSelector= j$(objFilter).val().split('^')[0] + j$(objFilter).val().split('^')[1];
                }

                j$(objFilter).parent().parent().find(".tdFilterOperator").append(j$(".spanAllFilterContainer").find("span[class='"+fldSelector+"Span']").html().split('~')[0]);
                // pick list value n label changes for  customers tab
                if(j$(".spanAllFilterContainer").find(".customersPickList").length > 0){
                    var selectPickList = j$(j$(".spanAllFilterContainer").find("span[class='"+fldSelector+"Span']").html().split('~')[1]);

                    j$(selectPickList).find('.customer-pickList option').each(function(index,option){
                            if(j$(option).val() != ''){
                            var label = j$(option).val();
                            var value =  j$(option).text();
                            j$(option).val(value);
                            j$(option).text(label);
                            }
                        })
                        j$(objFilter).parent().parent().find(".tdFilterValue").append(j$(selectPickList));
                 }else{
                     j$(objFilter).parent().parent().find(".tdFilterValue").append(j$(".spanAllFilterContainer").find("span[class='"+fldSelector+"Span']").html().split('~')[1]);
                }
                j$(objFilter).parent().parent().find(".tdFilterValue").find(".filterFieldClass[type='text']").attr("maxlength","50").attr("size","30");

                j$(objFilter).parent().parent().find(".tdFilterNullCheck").append(j$(".spanAllFilterContainer").find("span[class='"+fldSelector+"Span']").html().split('~')[2]);

                if (j$(objFilter).parent().parent().find(".tdFilterValue").find(".dateOnlyInput").length > 0) {
                    var dtObj = j$(objFilter).parent().parent().find(".tdFilterValue").find(".dateOnlyInput input");
                    existId = j$(dtObj).attr('id')
                    newId = existId + ':' + uniqueIdx;
                    j$(dtObj).attr("id", newId).attr("maxlength","10").attr("size","12").val('');
                    j$(dtObj).removeAttr("onfocus").bind("focus", function () {
                        DatePicker.pickDate(true, newId, false);
                    });
                }
                
                if (j$(objFilter).parent().parent().find(".tdFilterValue").find("input[value='USERLOOKUP']").length > 0) {
                   hideDDValues('cu', j$(objFilter).parent().parent().closest(".trMainFilterRow"));
                }                
                if (j$(objFilter).parent().parent().find(".tdFilterValue").find(".jBTFDateRangeSelection").length > 0) {
                    j$(objFilter).parent().parent().find(".tdFilterValue").find(".jBTFDateRangeSelection").attr("dummydateattrindex",uniqueIdx);
                }
                
                
                //for Checkbox obj
                if (j$(objFilter).parent().parent().find(".tdFilterValue").find(":checkbox").length > 0) {
                    var cbObj =j$(this).parent().parent().find(".tdFilterValue").find(":checkbox");
                    existId = j$(cbObj).attr('id');
                    var existName = j$(cbObj).attr('name')
                    newId = uniqueIdx+existId;
                    var newCbName = uniqueIdx+existName;
                    j$(cbObj).attr("id", newId);
                   
                    j$(cbObj).attr("name", newCbName);
                    j$(cbObj).attr("value", j$(cbObj).is(':checked'));
                    var test = j$(cbObj).is(':checked');
                    j$(cbObj).click( function(){
                       j$(cbObj).attr("value", j$(cbObj).is(':checked'));
                    });
                }
                
                
                //for multiSelectPicklistRow
                if (j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistRow").length > 0) {
                     var multiSelectPicklistObj = j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistRow select:eq(0)");
                     var multiSelectPicklistObjsec = j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistRow select:eq(1)");
                     var multiSelectPicklistObjPrnt = j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistTable").prev("select");
                     var multiSelectPicklistCelladd = j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistCell a:eq(0)");
                     var multiSelectPicklistCellrem = j$(objFilter).parent().parent().find(".tdFilterValue").find(".multiSelectPicklistCell a:eq(1)");
                
                
                     existId = j$(multiSelectPicklistObj).attr('id');
                     newSelIdfirst = uniqueIdx + j$(multiSelectPicklistObj).attr('id');
                     newSelIdSec = uniqueIdx + j$(multiSelectPicklistObjsec).attr('id');
                     newParnt = uniqueIdx + j$(multiSelectPicklistObjPrnt).attr('id');
                     newAdd = uniqueIdx + j$(multiSelectPicklistCelladd).attr('id');
                     newRem = uniqueIdx + j$(multiSelectPicklistCellrem).attr('id');
                
                     j$(multiSelectPicklistObj).attr("id", newSelIdfirst);
                     j$(multiSelectPicklistObj).removeAttr("ondblclick");
                     j$(multiSelectPicklistObj).attr("ondblclick", "MultiSelectPicklist.handleMSPSelect('" + newParnt + "')");
                
                     j$(multiSelectPicklistObjsec).attr("id", newSelIdSec);
                     j$(multiSelectPicklistObjsec).removeAttr("ondblclick");
                     j$(multiSelectPicklistObjsec).attr("ondblclick", "MultiSelectPicklist.handleMSPUnSelect('" + newParnt + "')");
                
                     j$(multiSelectPicklistObjPrnt).attr("id", newParnt);
                
                     var hrefvarAdd = j$(multiSelectPicklistCelladd).attr("href");
                     hrefvarAdd = hrefvarAdd.replace('%28%27', '%28%27' + uniqueIdx);
                     j$(multiSelectPicklistCelladd).attr("href", hrefvarAdd);
                
                     var hrefvarRem = j$(multiSelectPicklistCellrem).attr("href");
                     hrefvarRem = hrefvarRem.replace('%28%27', '%28%27' + uniqueIdx);
                     j$(multiSelectPicklistCellrem).attr("href", hrefvarRem);
                 }
                 j$(objFilter).parent().parent().find(".tdFilterValue").find(".requiredBlock").removeClass("requiredBlock");
                 
                }
                catch(e) {
                    console.log(e.message);
                }   
         }
         
         function removeUIViewFilterRow(){
            if(j$("#tbodyFilterContainer").find("tr.trMainFilterRow").length>1){
                var lastRow =  j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last");
                lastRow.find("select.ddFilterFields").multiselect("destroy");
                lastRow.remove();
              
            }
            if(j$("#tbodyFilterContainer").find("tr.trMainFilterRow").length==1){
                    j$("#fRemoveRowLink").hide();
                    j$("#fRemoveRowLinkGreyed").show();
            }
            
            rowIndex= parseInt(j$("#tbodyFilterContainer").find("tr.trMainFilterRow").length);
            if(rowIndex>=maxFiltersLimit){
                j$("#fAddRowLinkGreyed").show();
                j$("#fAddRowLink").hide();
            }
            else {
                j$("#fAddRowLinkGreyed").hide();
                j$("#fAddRowLink").show();
            }
         }
         
         function addReportParamRow(){
                var rowIndex= parseInt(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length);
                strHTML  ='<tr class="trMainFilterRow">';
                strHTML  +='<td width="240" valign="top">';
                strHTML  += '<select class="ddReportParamFields" style="max-width:260px">';
                strHTML  += '<option value="">None</option>';
                strHTML  += j$("#ddHiddenFilterField").html();
                strHTML  += '</select>';
                strHTML  +=' </td>';
                strHTML  +='<td  width="200" class="tdReportParamLabel" valign="top">';
                strHTML  += '<input class="selectedReportParamLabel" type="text" size="40px" maxLength="80"/>';
                strHTML  +='</td>';
                strHTML  +='<td  width="100" class="tdFilterOperator  othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='<td  width="200" class="tdFilterValue  othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='<td  width="25" class="tdFilterNullCheck othertds" valign="top">';
                strHTML  +='</td>';
                strHTML  +='<td class="tdRemoveReportParamIcon" width="25" valign="top"><span title="Remove" class="ui-icon ui-icon-close uiremoveBtn" style="display:inline-block; opacity :1;"></span></td>';
                strHTML  +='<td class="tdAddReportParamIcon" width="35" valign="top"><span title="Add" style="cursor: pointer; opacity: 1;" class="ui-icon ui-icon-plus"></span></td>';
                strHTML  +='</tr>';
                j$("#tbodyReportParamContainer").append(strHTML);
                
                j$(".ddReportParamFields").multiselect({    
                                                        header:true, 
                                                        multiple: false,
                                                        noneSelectedText: "Select an Option",
                                                        selectedList: 1
                                                    }).multiselectfilter({
                                                      label:'',
                                                      placeholder:'Type filter text',
                                                      autoReset:true,
                                            
                                                     });
                j$(".ui-multiselect-close").hide();
                
                
               
                j$("#tbodyReportParamContainer").find(".trMainFilterRow").last().find(".ddReportParamFields").val("");
                j$("#tbodyReportParamContainer").find("tr.trMainFilterRow:eq("+rowIndex+")").find(".ddReportParamFields").attr("dummyattrindex",rowIndex+100);
                j$(".tdAddReportParamIcon").unbind("click").bind("click",function(){
                    if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length<3){
                        if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length>0){
                            strHTML  ='<tr class="trReportConditionOperatorRow">';
                            strHTML  +='<td width="600" valign="top" colspan="6" style="text-align:center">';
                            strHTML  +='<select class="ddReportConditionOperator"><option value="OR">OR</option><option value="AND">AND</option></select>';
                            strHTML  +='</td>';
                            strHTML  +='</tr>';
                            j$("#tbodyReportParamContainer").append(strHTML);
                        }
                        addReportParamRow();
                        if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length>2){
                            j$("#tbodyReportParamContainer").find(".tdAddReportParamIcon").each(function(){
                                j$(this).html('<span title="Add" style="opacity: 0.4;" class="ui-icon ui-icon-plus"></span>');
                            });
                        }   
                        j$("#tbodyReportParamContainer").find(".tdRemoveReportParamIcon").each(function(){
                            j$(this).html('<span title="Remove" class="ui-icon ui-icon-close uiremoveBtn" style="cursor: pointer;display:inline-block; opacity : 1;"></span>');
                        });
                    
                        
                    }
                });
                j$(".tdRemoveReportParamIcon").unbind("click").bind("click",function(){
                    if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length>1){
                        
                        j$(this).parent().prev("tr.trReportConditionOperatorRow").remove();
                        j$(this).parent().find("td select.ddReportParamFields").multiselect("destroy");
                        j$(this).parent().remove();
                        if(j$("#tbodyReportParamContainer").find("tr:first").hasClass("trReportConditionOperatorRow")){
                            j$("#tbodyReportParamContainer").find("tr:first").remove();
                        }
                        j$("#tbodyReportParamContainer").find(".tdAddReportParamIcon").each(function(){
                            j$(this).html('<span title="Add" style="cursor: pointer; opacity: 1;" class="ui-icon ui-icon-plus"></span>');
                        });
                        
                    }
                    else{
                        j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").find(".ddReportParamFields").val('');
                        j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").find(".selectedReportParamLabel").val('');
                        j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").find(".othertds").html('');
                    }
                    
                        
                    
                });
            
          }
         
         function hideOverLayForm(){
             j$(".jbaraDummyOverLayForm").hide();
             j$(".waitingDescription").html('Saving...');
         }
         
         function showOverLayForm(fromOper){
            if(fromOper=='C'){
                j$(".waitingHolder").hide();
            }
            if(fromOper=='T'){
                j$(".waitingDescription").html('Loading...');
            }
            j$(".jbaraDummyOverLayForm").css({
                   'z-index':'700009',
                   'left':'0px',
                   'top':'0px',
                   'width':'100%',
                   'height':'100%'

            }).show();
        }
        
        function populateViewDetails(){
            viewItem = eval({!(jsonUIView)});
            var isPackage = {!(isPackage)};
            var ns = (isPackage == true || isPackage == 'true') ? GS.packageNS : '';
            if( viewItem.SectionId__c && viewItem.UITabName__c && 
                (viewItem[ns+"SectionId__r"][ns+"Type__c"] == 'RelatedList' || viewItem[ns+"SectionId__r"][ns+"Type__c"] == 'ExternalReport')
              ){
                viewItem.UITabName__c = viewItem.UITabName__c.length >= 15 ? viewItem.UITabName__c.substring(0, 15) : viewItem.UITabName__c;
            }
            
            j$(".ddTabsList").val(viewItem.UITabName__c).attr("disabled","disabled");
            j$(".viewNameInput").val(j$.trim(viewItem.Name));
            if(viewItem.ShowDefault__c) {
                j$("#chkDefaultView").attr("checked","checked");
            }   
            if(viewItem.Visibility__c == 'Public' || viewItem.Visibility__c == 'public') {
                j$("#sharePublic").attr("checked","checked");
            }
            else{
                j$("#sharePrivate").attr("checked","checked");
            }
            
            jsonFieldsList = eval({!(jsonUIViewFieldsList)});
            populateAvailableFieldsList(jsonFieldsList);
            var selectedFieldsJson = eval(viewItem.ColumnList__c);
            if(selectedFieldsJson.length>0){
                for(var Idx=0;Idx<selectedFieldsJson.length;Idx++){
                        fldObjectNameId =selectedFieldsJson[Idx].objectName;
                        fldNameId =selectedFieldsJson[Idx].name;
                        if(fldObjectNameId == "CustomerInfo__c" && fldNameId == "Account__r.Industry") {
                            fldNameId = "Industry__c";
                        }
                        
                        selectedFieldItem= j$.grep(jsonFieldsList, function(dt) {
                            return (dt.fName == fldNameId && dt.fObjectName == fldObjectNameId);
                        });
                        
                        if(selectedFieldItem.length>0){
                            addUISelectedField(selectedFieldItem,selectedFieldsJson[Idx].label,selectedFieldsJson[Idx].visibilityMode);
                            j$("#ddColumnSelectorList option[value='"+fldObjectNameId+"^"+fldNameId+"']").remove();
                        }   
                }
                        
            }
            populateHiddenFilterFields(jsonFieldsList);
            var selectedFilterJson = eval(viewItem.FilterConditions__c);
            if(selectedFilterJson.length>0){
                var $ddFilter;
                var $ddOperator;
                var $txtValueItem;
                var $fromValueItem;
                var $toValueItem;
                var $multiValueItem;
                for(var Jdx=0;Jdx<selectedFilterJson.length;Jdx++){
                    addUIViewFilterRow();
                    fldObjectNameId =selectedFilterJson[Jdx].objectName;
                    if(fldObjectNameId == "CustomerInfo__c" && selectedFilterJson[Jdx].name == "Account__r.Industry") {
                            fldNameId = 'Industry';
                            fldObjectNameId = "Account";
                    }
                    else {
                        fldNameId =selectedFilterJson[Jdx].name;
                    }
                    $ddFilter =j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last").find(".ddFilterFields");
                    $ddFilter.val(fldObjectNameId +'^'+fldNameId);
                    
                     constructUIFilterRowItems($ddFilter);
                    $ddOperator =j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last").find(".dummyOperatorFields");
                    $ddOperator.val(j$.trim(selectedFilterJson[Jdx].operator));
                    if(($ddOperator.val() != 'u' && $ddOperator.val() != 'x') && j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last").find(".filterFieldTypeClass").val() == 'PICKLIST') {
                            j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last").find(".filterFieldClass").removeAttr("multiple");
                    }
                    if($ddOperator.val() == 'e' || $ddOperator.val() == 'n'){
                       j$("#tbodyFilterContainer").find("tr.trMainFilterRow:last").find(".tdFilterNullCheck input").show();
                    }
                    populatePreSelectedFilterValues(selectedFilterJson[Jdx],'tbodyFilterContainer'); 
                }
            }
            
            var selectedReportParamJson = eval((viewItem.ReportParams__c!=null) ? viewItem.ReportParams__c: '[]');
            if(selectedReportParamJson.length>0){
                for(var Rdx=0;Rdx<selectedReportParamJson.length;Rdx++){
                    //Adding empty row with this method
                    addReportParamRow();
                    
                    //Settign Account Industry after upgrade
                    fldObjectNameId = selectedReportParamJson[Rdx].objectName;
                    
                    if(fldObjectNameId == "CustomerInfo__c" && selectedReportParamJson[Rdx].fieldName == "Account__r.Industry") {
                            
                            fldNameId = 'Industry';
                            fldObjectNameId = "Account";
                    }
                    else {
                        fldNameId =selectedReportParamJson[Rdx].fieldName;
                    }
                    j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".ddReportParamFields").val(fldObjectNameId +'^'+ fldNameId);
                    j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".selectedReportParamLabel").val(selectedReportParamJson[Rdx].label);
                    $ddFilter =j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".ddReportParamFields");
                    constructUIFilterRowItems($ddFilter);
                    
                    if(j$.trim(selectedReportParamJson[Rdx].selectedOperator)!=''){
                        $ddOperator =j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".dummyOperatorFields");
                        $ddOperator.val(j$.trim(selectedReportParamJson[Rdx].selectedOperator));
                        if(($ddOperator.val() != 'u' && $ddOperator.val() != 'x') && j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".filterFieldTypeClass").val() == 'PICKLIST') {
                            j$("#tbodyReportParamContainer").find(".trMainFilterRow").eq(Rdx).find(".filterFieldClass").removeAttr("multiple");
                        }
                        if($ddOperator.val() == 'e' || $ddOperator.val() == 'n'){
                       j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").find(".tdFilterNullCheck input").show();
                    }
                    }
                    if(j$.trim(selectedReportParamJson[Rdx].value)!=''){
                        populatePreSelectedFilterValues(selectedReportParamJson[Rdx],'tbodyReportParamContainer');
                    }
                    if(selectedReportParamJson[Rdx].isNull){
                         j$("#tbodyReportParamContainer").find("tr.trMainFilterRow:last .tdFilterNullCheck input").attr("checked","checked");
                         j$("#tbodyReportParamContainer").find("tr.trMainFilterRow:last .tdFilterValue .filterFieldClass").attr("disabled","disabled");

                    }
                    if(selectedReportParamJson[Rdx].logicalOperator!='' && selectedReportParamJson.length>1 && selectedReportParamJson.length!=Rdx+1){
                        strHTML  ='<tr class="trReportConditionOperatorRow">';
                        strHTML  +='<td width="600" valign="top" colspan="6" style="text-align:center">';
                        strHTML  +='<select class="ddReportConditionOperator"><option value="OR">OR</option><option value="AND">AND</option></select>';
                        strHTML  +='</td>';
                        strHTML  +='</tr>';
                        j$("#tbodyReportParamContainer").append(strHTML);
                        j$("#tbodyReportParamContainer").find(".trReportConditionOperatorRow:last").find(".ddReportConditionOperator").val(selectedReportParamJson[Rdx].logicalOperator);
                    }
                }
                //removeNotEqualOperatorForDates("tbodyReportParamContainer");
                
                if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length>2){
                        j$("#tbodyReportParamContainer").find(".tdAddReportParamIcon").each(function(){
                            j$(this).html('<span title="Add" style="opacity: 0.4;" class="ui-icon ui-icon-plus"></span>');
                        });
                        
                }
                if(j$("#tbodyReportParamContainer").find("tr.trMainFilterRow").length>1){
                    j$("#tbodyReportParamContainer").find(".tdRemoveReportParamIcon").each(function(){
                            j$(this).html('<span title="Remove" class="ui-icon ui-icon-close uiremoveBtn" style="cursor: pointer;display:inline-block; opacity : 1;"></span>');
                    });
                }
            }
            else {
                addReportParamRow();
            }
            
            if(j$(".ddTabsList").val()=='Customer360' || j$(".ddTabsList").val()=='NPS' || j$(".ddTabsList").val()=='SurveyParticipants' || j$(".ddTabsList").val()=='SurveyDetailReport'){
                j$(".spanChkDefault").hide();
                j$(".viewNameInput").attr("disabled","disabled");
                j$(".btnSaveAsClick").hide();
            }   
            
            if(j$(".ddTabsList").val()=='Customer360' || j$(".ddTabsList").val()=='NPS' || j$(".ddTabsList").val()=='SurveyParticipants' || j$(".ddTabsList").val()=='SurveyDetailReport'){
                    showViewWithoutFilters();
            }
            else {
                showUIViewOtherSections();
                if(selectedFilterJson.length==0){
                    addUIViewFilterRow();
                }   
            }
            
            j$(".ddFilterFields").multiselect("refresh");
            j$(".ddReportParamFields").multiselect("refresh");
    }
    
    function populatePreSelectedFilterValues(preSelectedFilterItem,bodyRowId){
            //alert(JSON.stringify(preSelectedFilterItem));
            var $txtValueItem;
            var $fromValueItem;
            var $toValueItem;
            var $multiValueItem;
                    if(preSelectedFilterItem.fieldType=='MULTIPICKLIST'){
                        //$multiValueItem =j$.trim(preSelectedFilterItem.value).split('(')[1].split(')')[0];
                        $multiValueItem =j$.trim(preSelectedFilterItem.value);
                        $multiValueItem = $multiValueItem.substring(1, ($multiValueItem).length-1);
                        $fromValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".multiSelectPicklistTable").find("select:eq(0)");
                        $toValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".multiSelectPicklistTable").find("select:eq(1)");
                        //j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".multiSelectPicklistTable").find("select:eq(1)");
                        j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue ").find(".multiSelectPicklistCell a").removeAttr("href");
                        j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue ").find(".multiSelectPicklistCell a:eq(0)").bind("click",function(){
                            //alert(j$(this).parent().parent().find("select:last").html());
                            objFromParent= j$(this);
                            j$(objFromParent).parent().parent().find("select:eq(0)").find("option:selected").each(function(){
                                j$(objFromParent).parent().parent().find("select:eq(1)").append(j$(this));
                            });
                            j$(objFromParent).parent().parent().find("select:eq(1) option").removeAttr("selected");
                            //j$(objFromParent).parent().parent().find("select.eq(0)").find("option:selected").remove();
                        });
                        j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue ").find(".multiSelectPicklistCell a:eq(1)").bind("click",function(){
                            objToParent = j$(this);
                            j$(objToParent).parent().parent().find("select:eq(1)").find("option:selected").each(function(){
                                j$(objToParent).parent().parent().find("select:eq(0)").append(j$(this));
                            });
                            j$(objToParent).parent().parent().find("select:eq(0) option").removeAttr("selected");
                            //j$(objToParent).parent().parent().find("select.eq(1)").find("option:selected").remove();
                        });
                        if($multiValueItem.indexOf('^,^') > 0) {
                            muliItemsArr= $multiValueItem.split('^,^');
                            strHTML='';
                            for(var Kdx=0;Kdx< muliItemsArr.length;Kdx++){
                                strHTML += "<option value='"+Kdx+"'>"+ muliItemsArr[Kdx].replace("\\'","'") +"</option>";
                                $fromValueItem.find("option").each(function(){
                                    if(j$(this).text().replace("'","\\'")==muliItemsArr[Kdx]){
                                        j$(this).remove();
                                        return 1>2;
                                    }
                                    
                                });
                                //$fromValueItem.find("option:[text='"+muliItemsArr[Kdx] +"']").remove();
                            }
                            $toValueItem.append(strHTML);
                        }
                        else {
                            strHTML = "<option value='999999'>"+ $multiValueItem.replace("\\'","'") +"</option>";
                            $toValueItem.append(strHTML);
                            $fromValueItem.find("option").each(function(){
                                    if(j$(this).text().replace("'","\\'")==$multiValueItem){
                                        j$(this).remove();
                                        return 1>2;
                                    }
                                    
                            });
                            //$fromValueItem.find("option:[text='"+$multiValueItem +"']").remove();
                        }
                        
                    }
                    else if(preSelectedFilterItem.fieldType=='CUSTOMLOOKUP') {
                        $lookupContainer =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        if(j$.trim(preSelectedFilterItem.value).split('(')[1] == undefined) {
                            $multiValueItem =j$.trim(preSelectedFilterItem.value).split('(')[0];
                            $lookupContainer.find("option[value='" + $multiValueItem +"']").attr("selected","selected");
                        }
                        else {
                            $multiValueItem =j$.trim(preSelectedFilterItem.value).split('(')[1].split(')')[0];
                            if($multiValueItem .indexOf(',')>0){
                                $multiValueItem = $multiValueItem.split(",");
                                for(var Kdx=0;Kdx<$multiValueItem.length;Kdx++){
                                    $lookUpValueItem = $multiValueItem[Kdx].substring(1,$multiValueItem[Kdx].length-1);
                                    $lookupContainer.find("option[value='" + $lookUpValueItem +"']").attr("selected","selected") ;
                                }
                            }
                            else {
                                $lookUpValueItem = $multiValueItem.substring(1,$multiValueItem.length-1);
                                $lookupContainer.find("option[value='" + $lookUpValueItem +"']").attr("selected","selected");
                               
                            }   
                        }
                        
                        
                    }
                    
                    else if( preSelectedFilterItem.fieldType=='PICKLIST' ) {
                        $lookupContainer =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        var $operator = j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterOperator").find(".ddOperatorClass");
                        if($operator.val() == 'u' || $operator.val() == 'x') {
                            $operator.parent().next().find("select:eq(0)").attr("multiple", "multiple").attr("size",4); 
                        }
                        else {
                                $operator.parent().next().find("select:eq(0)").removeAttr("multiple").attr("size",1);
                        }
                        if($operator.val() == 'u' || $operator.val() == 'x') {
                            var value = j$.trim(preSelectedFilterItem.value).replace(/^\(/, "").replace(/\)$/, "");
                            $multiValueItem  = value.indexOf(",") > 0 ? value.split(",") : value;
                            if(Array.isArray($multiValueItem)){
                                for(var Kdx=0;Kdx<$multiValueItem.length;Kdx++){
                                    $lookUpValueItem = $multiValueItem[Kdx].replace(/^\'/, "").replace(/\'$/, "");
                                    $lookupContainer.find("option[value='" + $lookUpValueItem +"']").attr("selected","selected") ;
                                }
                            }
                            else {
                                $lookUpValueItem = $multiValueItem.replace(/^\'/, "").replace(/\'$/, "");
                                $lookupContainer.find("option[value='" + $lookUpValueItem +"']").attr("selected","selected");
                            }  
                        }
                        else {
                              $multiValueItem =j$.trim(preSelectedFilterItem.value).replace(/^\'/, "").replace(/\'$/, "");
                              $lookupContainer.find("option[value='" + $multiValueItem +"']").attr("selected","selected");
                        }
                    }
                    else  if(preSelectedFilterItem.fieldType=='BOOLEAN'){
                        $chkValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        if(j$.trim(preSelectedFilterItem.value)=='true'){
                            $chkValueItem.attr("checked","checked");
                        }
                    }
                    
                    else  if(preSelectedFilterItem.fieldType=='STRING' && preSelectedFilterItem.value != '@@CURRENTUSER') {
                        $chkValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        $chkValueItem.next().val(preSelectedFilterItem.value);
                        if($chkValueItem.next().hasClass("otherusername")) {
                            $chkValueItem.val('ou');
                            hideDDValues('ou', j$("#"+ bodyRowId).find("tr.trMainFilterRow:last"));
                            $chkValueItem.next().show();
                        }
                        else {
                            $chkValueItem.val(preSelectedFilterItem.value);
                        }
                    }
                    else  if(preSelectedFilterItem.fieldType=='USERLOOKUP'){
                        $chkValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        if(j$.trim(preSelectedFilterItem.value)=='@@CURRENTUSER'){
                            $chkValueItem.val('cu');
                            hideDDValues('cu', j$("#"+ bodyRowId).find("tr.trMainFilterRow:last"));
                            $chkValueItem.next().hide();
                        }
                        else {
                            $chkValueItem.val('ou');
                            hideDDValues('ou', j$("#"+ bodyRowId).find("tr.trMainFilterRow:last"));
                            $chkValueItem.next().val(preSelectedFilterItem.value);
                            $chkValueItem.next().show();
                        }
                    }
                    else if(preSelectedFilterItem.fieldType=='TIMEFRAMECUSTOMDATE' || preSelectedFilterItem.fieldType=='TIMEFRAMECUSTOMDATETIME'
                        || preSelectedFilterItem.fieldType=='TIMEFRAMENORMALDATE' ||  preSelectedFilterItem.fieldType=='TIMEFRAMENORMALDATETIME'){
                        //j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").append(j$("#jBTFDateRangeSelectionDiv").html());
                        j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass").attr("dummydateattrindex",parseInt(j$("#"+ bodyRowId).find("tr.trMainFilterRow").length));
                        if(preSelectedFilterItem.fieldType=='TIMEFRAMECUSTOMDATE' || preSelectedFilterItem.fieldType=='TIMEFRAMECUSTOMDATETIME'){
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass").val('JBcustom');
                            timeFrameDateRangeChanges('JBcustom',j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass"));
                            
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".jbaraDummyTimeFrameStartDateInput").val(JBARAformatDate(new Date(j$.trim(preSelectedFilterItem.value.split('^')[0])),userLocaleDateFormatMap.DateFormat));
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".jbaraDummyTimeFrameEndDateInput").val(JBARAformatDate(new Date(j$.trim(preSelectedFilterItem.value.split('^')[1])),userLocaleDateFormatMap.DateFormat));
                        }
                        else{
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass").val(preSelectedFilterItem.value);
                        }
                    }
                    else if(preSelectedFilterItem.fieldType=='DATE' || preSelectedFilterItem.fieldType=='DATETIME'){
                        //j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").append(j$("#jBTFDateRangeSelectionDiv").html());
                        j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass").attr("dummydateattrindex",parseInt(j$("#"+ bodyRowId).find("tr.trMainFilterRow").length));
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass").val('JBcustom');
                            timeFrameDateRangeChanges('JBcustom',j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass"));
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".jbaraDummyTimeFrameStartDateInput").val(JBARAformatDate(new Date(j$.trim(preSelectedFilterItem.value)),userLocaleDateFormatMap.DateFormat));
                            j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".jbaraDummyTimeFrameEndDateInput").val(JBARAformatDate(new Date(j$.trim(preSelectedFilterItem.value)),userLocaleDateFormatMap.DateFormat));
                    }
                    else {
                        $txtValueItem =j$("#"+ bodyRowId).find("tr.trMainFilterRow:last").find(".tdFilterValue").find(".filterFieldClass");
                        $txtValueItem.val(j$.trim(preSelectedFilterItem.value));
                    }
                   //null check
                  if(preSelectedFilterItem.isNull){
                     j$("#"+ bodyRowId).find("tr.trMainFilterRow:last .tdFilterNullCheck input").attr("checked","checked");
                     j$("#"+ bodyRowId).find("tr.trMainFilterRow:last .tdFilterValue .filterFieldClass").attr("disabled","disabled");
                  }
                    
        
        }
 
   // filter condition class 
   var filterConditionClass = function(){
        this.name =null;
        this.value =null;
        this.objectName =null;
        this.fieldType =null;
        this.operator =null; 
    }
    
    // report param class 
       var reportParamClass = function(){
            this.fieldName =null;
            this.objectName =null;
            this.ctrlType =null;
            this.ctrlData =null;
            this.operatorsList =null; 
            this.label = null;
            this.fieldType =null;
            this.value = null;
            this.selectedOperator = null;
            this.logicalOperator = null;
            
        }
    
    var genericKeyValueClass = function(){
            this.key = null;
            this.value = null;
       }       
    
     // uiView class structure
   var uiView = function(){
        this.Id                     = null;
        this.Name                   = null;
        this.Dimensions__c          = null;
        this.Measures__c            = null;
        this.ColumnList__c          = null;
        this.FilterConditions__c    = null;
        this.ShowDefault__c         = false;
        this.UITabName__c           = null;
        this.Visibility__c          = null;
        this.ReportParams__c        = null;
        this.VisualType__c          = "List";

   }
  
     </script> 
     <apex:outputPanel id="jsUIFormPanel">
        <script type="text/javascript">
            linkedToSectionFlag = '{!(isLinkedToSection)}';
            sectionIdAvailableFlag = '{!(isSectionIdAvailable)}';
            
            function uiTabChange(){
                //showOverLayForm('T');
                actionUIViewtabChange(j$(".ddTabsList").val());
            }
            
            function afterUIViewsTabChange() {
                //hideOverLayForm();
            //  j$(".spanAllFilterContainer").find(".dateOnlyInput").find("input").val("");             
                jsonFieldsList = eval({!(jsonUIViewFieldsList)});
                //JB-2447               
                populateAvailableFieldsList(jsonFieldsList);
                j$("#tblUIViewSelectedFields").find("tr:gt(0)").remove();
                j$("#tbodyFilterContainer").find("tr.trMainFilterRow").remove();
                j$("#tbodyReportParamContainer").html('');
                
                if(j$(".ddTabsList").val()=='Customer360' || j$(".ddTabsList").val()=='NPS' || j$(".ddTabsList").val()=='SurveyParticipants' || j$(".ddTabsList").val()=='SurveyDetailReport'){
                    var defualtViewNameText='';
                    j$("#chkDefaultView").attr("checked","checked");
                    j$(".spanChkDefault").hide();
                    defaultViewNameText =(j$(".ddTabsList").val()=='Customer360')? 'Customer 360' : (j$(".ddTabsList").val()=='NPS') ? 'NPS' : ((j$(".ddTabsList").val()=='SurveyParticipants') ? 'Survey Participants' : 'Survey Detail Report');
                    j$(".viewNameInput").val(defaultViewNameText).attr("disabled","disabled");
                }
                else {
                    j$("#chkDefaultView").removeAttr("checked");
                    j$(".spanChkDefault").show();
                    j$(".viewNameInput").val('').removeAttr("disabled");
                }
                if(j$(".ddTabsList").val()=='Customer360' || j$(".ddTabsList").val()=='NPS'|| j$(".ddTabsList").val()=='SurveyParticipants' || j$(".ddTabsList").val()=='SurveyDetailReport'){
                    showViewWithoutFilters();
                    
                }
                else {
                    showUIViewOtherSections();
                    populateHiddenFilterFields(jsonFieldsList);
                    addUIViewFilterRow();
                    addReportParamRow();
                }
                if(j$(".ddTabsList").val()!=''){
                    j$(".btnSaveClick").removeAttr("disabled");
                    j$(".btnSaveClick").addClass("btn").removeClass("btnDisabled");
                    
                }
           }
           
           function showViewWithoutFilters(){
                    j$("#divFieldsSelector").find("h3").html('Step 3. Select Fields to Display');
                    j$("#divSharingSelector").find("h3").html('Step 4. Restrict Visibility');
                    j$("#divViewNameSelector").show();
                    j$("#divFilterSelector").hide();
                    j$("#divReportParamSelector").hide();
                    j$("#divFieldsSelector").show();
                    //To be shown when we add sharing permission
                    //j$("#divSharingSelector").show();
            }
            
            var relatedObjectName = '';
            function populateAvailableFieldsList(fieldItems) {
                relatedObjectName = '{!(relatedObjectName)}';
                var selUITabName = j$.trim(j$(".ddTabsList").val());
                strHTML ='';
                fldObjectName ='';                
                for(var Idx=0;Idx<fieldItems.length;Idx++) {
                    if(fieldItems[Idx].fObjectName=='Account'){
                        fldObjectName='Account';
                    }
                    else if(fieldItems[Idx].fObjectName=='{!(caseViewObjectName)}'){
                        fldObjectName='{!(caseViewObjectName)}';
                    }
                    //JB-2447
                    else if(fieldItems[Idx].fObjectName=='{!(relatedObjectName)}'){
                        fldObjectName='{!(relatedObjectName)}';
                        fldObjectName= fldObjectName.replace('__c','');
                    }
                    else if(fieldItems[Idx].fObjectName=='Contact'){
                        fldObjectName='Contact';
                    }
                    else if(fieldItems[Idx].fObjectName=='SurveyParticipant__c' && (relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c'))){
                        fldObjectName = (selUITabName == 'SurveyDetailReport') ? 'Survey Participant' : ((relatedObjectName != 'SurveyParticipant__c' || relatedObjectName != getKey('SurveyParticipant__c')) ? 'SurveyParticipant__c' :'Custom');
                    }
                    //JB-2447
                    else if(fieldItems[Idx].fObjectName=='{!(caseViewObjectName)}'){
                        fldObjectName='{!(caseViewObjectName)}';
                    }
                    
                    else {
                        
                        fldObjectName = (jbaraObjectLabels[fieldItems[Idx].fObjectName]) ? jbaraObjectLabels[fieldItems[Idx].fObjectName] : fieldItems[Idx].fObjectName;
                        
                        //fldObjectName = ((selUITabName == 'SurveyDetailReport' || selUITabName == 'SurveyParticipants') && fieldItems[Idx].fObjectName == 'CustomerInfo__c') ? 'CustomerInfo' : 'JBara';
                    }
                    
                    //hide the duplicate industries
                    if(fieldItems[Idx].fObjectName=='CustomerInfo__c' || fieldItems[Idx].fObjectName=='TransHeader__c' ){
                        if(fieldItems[Idx].fName=='Id'){
                            continue;
                        }
                        
                    }
                    
                    strHTML += '<option value="'+fieldItems[Idx].fObjectName+'^'+ fieldItems[Idx].fName+'">'+ fldObjectName + displaySeprator  + fieldItems[Idx].fLabel +'</option>';
                }
                j$(".ddColumnFilterInput").val("");
                j$("#ddColumnSelectorList").html(strHTML);
                sortDropDownItems('ddColumnSelectorList');
                var options = j$("#ddColumnSelectorList option");
                fieldsList = [];
                for(var i = 0 ; i<options.length; i++){
                   fieldsList.push({value:options.eq(i).val(), label:options.eq(i).text()});
                
                }
            }
            
            function sortDropDownItems(objToSortId){
              var my_options = j$("#" + objToSortId +" option");
              my_options.sort(function(a,b) {
                    if (a.text > b.text) return 1;
                    else if (a.text < b.text) return -1;
                    else return 0
                });
                j$("#"+ objToSortId).empty().append(my_options).val('0');
                
            }
            
            
           function populateHiddenFilterFields(fieldsList){
                strHTML ='';
                    var fldList = eval({!(FilterListColumns)});
                    
                    //JB-2447                   
                    j$.each(fldList,function(k,v){
                         fldObjectNameId = v.filterObjectName;
                         fldNameId       = v.filterFieldname;
                         fldLabel        = v.filterFieldLabel;
                       
                        if(fldObjectNameId=='Account'){
                            fldObjectName='Account';
                        }
                        else if(fldObjectNameId=='{!(caseViewObjectName)}'){
                            fldObjectName='{!(caseViewObjectName)}';
                        }
                        //JB-2447
                        else if(fldObjectNameId == '{!(relatedObjectName)}'  || fldObjectNameId == getKey('{!(relatedObjectName)}')){
                            fldObjectName='{!(relatedObjectName)}';
                            fldObjectName= fldObjectName.replace('__c','');
                        }
                        else {
                            fldObjectName = (jbaraObjectLabels[fldObjectNameId]) ? jbaraObjectLabels[fldObjectNameId] : fldObjectNameId;
                        }
                        strHTML += '<option value="'+fldObjectNameId+'^'+ fldNameId+'">'+ fldObjectName + displaySeprator  + fldLabel +'</option>';
                    });
                j$("#ddHiddenFilterField").html(strHTML);
                sortDropDownItems('ddHiddenFilterField');
           }
           
           function saveViewClick(){
                if(validateViewInputs()){
                    uiViewItem = new uiView();
                    uiViewItem.Id = (viewId == '') ? null : viewId;
                    uiViewItem.Name                 = j$.trim(j$(".viewNameInput").val());
                    uiViewItem.ColumnList__c        = JSON.stringify(getSelectedFieldsToSave());
                    uiViewItem.FilterConditions__c  = JSON.stringify(getFilterConditionsToSave());
                    uiViewItem.ReportParams__c      = JSON.stringify(getReportParamsToSave());
                    uiViewItem.ShowDefault__c       = j$("#chkDefaultView").is(":checked");
                    uiViewItem.UITabName__c         = j$(".ddTabsList").val();
                    if(j$("#sharePublic").is(":checked")) {
                        uiViewItem.Visibility__c = 'Public';
                    }
                    else {
                        uiViewItem.Visibility__c = 'Private';
                    }
                    
                    if (strNameSpace != '') {
                        uiViewItem = pushJbaraNameSpace(uiViewItem, strNameSpace);
                     }
                    
                    j$(".hdnViewJson").val(JSON.stringify(uiViewItem));
                    console.log(j$(".hdnViewJson").val())
                    actionSaveView();
                }
           }
           
            function saveAsViewClick(){
                if(validateViewInputsForClone() && validateViewInputs()) {
                    uiViewItem                      = new uiView();
                    uiViewItem.Id                   = null;
                    uiViewItem.Name                 = j$.trim(j$(".viewNameInput").val());
                    uiViewItem.ColumnList__c        = JSON.stringify(getSelectedFieldsToSave());
                    uiViewItem.FilterConditions__c  = JSON.stringify(getFilterConditionsToSave());
                    uiViewItem.ReportParams__c      = JSON.stringify(getReportParamsToSave());
                    uiViewItem.ShowDefault__c       = j$("#chkDefaultView").is(":checked");
                    uiViewItem.UITabName__c         = j$(".ddTabsList").val();
                    
                    if(j$("#sharePublic").is(":checked")){
                        uiViewItem.Visibility__c = 'Public';
                    }
                    else {
                        uiViewItem.Visibility__c = 'Private';
                    }
               
                    if (strNameSpace != '') {
                        uiViewItem = pushJbaraNameSpace(uiViewItem, strNameSpace);
                     }
                    
                    j$(".hdnViewJson").val(JSON.stringify(uiViewItem));
                    actionSaveAsView();
                
                }
           }
           
           
           function validateViewInputsForClone(){
                viewItem = eval({!(jsonUIView)});
                var validEntries =true;
                var errorList= new Array();
                var fltRegEx = /^[\d]{1,10}(\.[\d]{1,2})?$/;
                j$("#jBaraUIViewValidationsContainer").hide();
                if(viewItem != null){
                    j$(".btnSaveClick").attr("disabled","disabled");
                    j$(".btnSaveClick").removeClass("btn").addClass("btnDisabled");
                    if((j$.trim(j$(".viewNameInput").val()))==(j$.trim(viewItem.Name))){
                        errorItem = new JBaraErrorClass();
                        errorItem.header = 'View  Name:';
                        errorItem.msg    =  'Please enter a new Name for the Cloned UI View';
                        errorList.push(errorItem);
                        validEntries = false;
                    }
                }
        
                if(!validEntries){
                    showJBaraValidationErrors('jBaraUIViewValidationsContainer',errorList);
                    var $target = j$('html,body'); 
                    $target.animate({scrollTop: 0}, 1000);
                    hideOverLayForm();
                    j$(".viewNameInput").focus();
                }
            
            return validEntries;
           }
         
           function sanitizeInput() {
            var viewNameObj = j$(".viewNameInput");
            var viewNameValue = j$.trim(viewNameObj.val());
            viewNameValue = j$.htmlClean(viewNameValue, { allowedTags: [""]}); 
            viewNameObj.val(viewNameValue);
           }
           
           function validateViewInputs(){
                var validEntries =true;
                var errorList= new Array();
                var fltRegEx = /^[\d]{1,10}(\.[\d]{1,2})?$/;
                j$("#jBaraUIViewValidationsContainer").hide();
                //sanitizeInput();
                
                if(j$.trim(j$(".ddTabsList").val())==''){
                    errorItem = new JBaraErrorClass();
                    errorItem.header = 'Tab Name:';
                    errorItem.msg    =  'Required';
                    errorList.push(errorItem);
                    validEntries = false;
                }
                
                if(j$(".viewNameInput").val() == ''){
                    errorItem = new JBaraErrorClass();
                    errorItem.header = 'View  Name:';
                    errorItem.msg    =  'Required';
                    errorList.push(errorItem);
                    validEntries = false;
                }
                
                if(j$(".uiViewSelectedFieldsTBody tr").length==0){
                    errorItem = new JBaraErrorClass();
                    errorItem.header = 'Select at least one field from available fields:';
                    errorItem.msg    =  'Required';
                    errorList.push(errorItem);
                    validEntries = false;
                }
                var fldFilterVal;
                j$("#tbodyFilterContainer tr.trMainFilterRow").each(function(){
                    //This is the fix for IE 8
                    fldFilterVal="";
                    if(j$(this).find(".filterFieldTypeClass").val() == 'BOOLEAN'){
                        j$(this).find(".filterFieldClass").val('1');
                        fldFilterVal='1';
                    }
                    else if(j$(this).find(".filterFieldTypeClass").val()=='CUSTOMLOOKUP'){
                        fldFilterVal = (j$(this).find(".filterFieldClass option:selected").length==0)?'': 'hasVal';
                    }
                    else if(j$(this).find(".filterFieldTypeClass").val()=='MULTIPICKLIST'){
                        fldFilterVal = (j$(this).find(".filterFieldClass:eq(4) option").length==0)?'': 'hasVal';
                    }
                    else if(j$(this).find(".filterFieldTypeClass").val()=='PICKLIST'){
                       fldFilterVal = j$(this).find(".filterFieldClass").val();
                    }
                    else {
                        fldFilterVal = j$.trim(j$(this).find(".filterFieldClass").val());
                    }
                    
                    if(j$(this).find(".ddFilterFields option:selected").val() != "" && fldFilterVal && fldFilterVal.length>0 && j$(this).find(".dummyOperatorFields option:selected").val() != "") {
                         if(j$(this).find(".filterFieldTypeClass").val() == 'DATE' || j$(this).find(".filterFieldTypeClass").val() == 'DATETIME'){
                            if(j$(this).find(".filterFieldClass").val()=='JBcustom'){
                                stDate='';
                                etDate ='';
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())=='' && j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())!=''){
                                        fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria From Date is missing: ';
                                         errorItem.msg   =  getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())!='' && j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())==''){
                                        fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria To Date is missing: ';
                                         errorItem.msg   = getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())!=''){
                                    if(!isNaN(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val()))) {
                                         fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria From Date: ';
                                         errorItem.msg   =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                            
                                    }
                                    else {
                                        stDate = JBARAgetValidDateFormat(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val()), userLocaleDateFormatMap.DateFormat);
                                        if(!JBARAisDate(stDate, userLocaleDateFormatMap.DateFormat)) {
                                            fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Filter Criteria From Date: ';
                                            errorItem.msg    =  'Invalid '+ getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            stDate='';
                                        }
                                    }
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())!=''){
                                    if(!isNaN(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val()))) {
                                         fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria To Date: ';
                                         errorItem.msg   =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                            
                                    }
                                    else {
                                        etDate = JBARAgetValidDateFormat(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val()), userLocaleDateFormatMap.DateFormat);
                                        if(!JBARAisDate(etDate, userLocaleDateFormatMap.DateFormat)) {
                                            fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Filter Criteria To Date: ';
                                            errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            etDate='';
                                        }
                                    }
                                }
                                
                                if(stDate!='' && etDate!=''){
                                    stDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(stDate, userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                                    etDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(etDate, userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                                    if(Date.parse(stDate) > Date.parse(etDate)) {
                                            fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Filter Criteria Date: ';
                                            errorItem.msg    =  'From date should be less than To date ('+ getDisplayFieldLabel(fldObjectNameId,fldNameId) +')';
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            
                                    }   
                                }   
                            }
                         }
                        if(j$(this).find(".filterFieldTypeClass").val() == 'CURRENCY' || j$(this).find(".filterFieldTypeClass").val() == 'DOUBLE' || j$(this).find(".filterFieldTypeClass").val() == 'PERCENT'){
                            fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                            fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                            if(isNaN(j$.trim(j$(this).find(".filterFieldClass").val()))) {
                                errorItem = new JBaraErrorClass();
                                errorItem.header = 'Filter Criteria Number: ';
                                errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                errorList.push(errorItem);  
                                validEntries = false;
                            }
                            else{
                                
                                    if(!fltRegEx.test(j$.trim(j$(this).find(".filterFieldClass").val()))){
                                        errorItem = new JBaraErrorClass();
                                        errorItem.header = 'Filter Criteria Number Exceeds Allowed Limit of (10,2): ';
                                        errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                        errorList.push(errorItem);  
                                        validEntries = false;
                                    }
                                
                            }   
                        }
                        if(j$(this).find(".filterFieldTypeClass").val() == 'INTEGER' || j$(this).find(".filterFieldTypeClass").val() == 'NUMBER'){
                            var er = /^[0-9]+$/;
                            if(!er.test(j$.trim(j$(this).find(".filterFieldClass").val()))){
                                fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                                fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                                errorItem = new JBaraErrorClass();
                                errorItem.header = 'Filter Criteria Number: ';
                                errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                errorList.push(errorItem);  
                                validEntries = false;
                            }
                        }   
                    }
                }); 
                
                j$("#tbodyReportParamContainer").find(".trMainFilterRow").each(function(){
                    var blnReportParamsValidated= false;
                    if(j$.trim(j$(this).find(".ddReportParamFields option:selected").val()) !=''){
                        if(j$.trim(j$(this).find(".selectedReportParamLabel").val()) == ''){
                            errorItem = new JBaraErrorClass();
                            errorItem.header = 'Report Params Label:';
                            errorItem.msg    =  'Required';
                            errorList.push(errorItem);
                            validEntries = false;
                            blnReportParamsValidated =true;
                        }
                    }
                    if(blnReportParamsValidated){
                        return (false);
                    }
                });
                
                j$("#tbodyReportParamContainer tr.trMainFilterRow").each(function(){
                     if(j$(this).find(".ddReportParamFields option:selected").val() != "" && j$(this).find(".filterFieldClass").val() != '' && j$(this).find(".dummyOperatorFields option:selected").val() != ''){
                         if(j$(this).find(".filterFieldTypeClass").val() == 'DATE' || j$(this).find(".filterFieldTypeClass").val() == 'DATETIME'){
                            if(j$(this).find(".filterFieldClass").val()=='JBcustom'){
                                stDate='';
                                etDate ='';
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())=='' && j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())==''){
                                        fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria From Date and To Date is missing: ';
                                         errorItem.msg   =  getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                }
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())=='' && j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())!=''){
                                        fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria From Date is missing: ';
                                         errorItem.msg   =  getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())!='' && j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())==''){
                                         fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Filter Criteria To Date is missing: ';
                                         errorItem.msg   = getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val())!=''){
                                    if(!isNaN(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val()))) {
                                         fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Report Param From Date: ';
                                         errorItem.msg   =  'Invalid '+ getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                            
                                    }
                                    else {
                                        stDate = JBARAgetValidDateFormat(j$.trim(j$(this).find(".jbaraDummyTimeFrameStartDateInput").val()), userLocaleDateFormatMap.DateFormat);
                                        if(!JBARAisDate(stDate, userLocaleDateFormatMap.DateFormat)) {
                                            fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Report Param From Date: ';
                                            errorItem.msg    =  'Invalid '+ getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            stDate='';
                                        }
                                    }
                                }
                                
                                if(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val())!=''){
                                    if(!isNaN(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val()))) {
                                         fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                         fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                         errorItem = new JBaraErrorClass();
                                         errorItem.header = 'Report Param To Date: ';
                                         errorItem.msg   =  'Invalid '+ getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                         errorList.push(errorItem);
                                         validEntries = false;
                                            
                                    }
                                    else {
                                        etDate = JBARAgetValidDateFormat(j$.trim(j$(this).find(".jbaraDummyTimeFrameEndDateInput").val()), userLocaleDateFormatMap.DateFormat);
                                        if(!JBARAisDate(etDate, userLocaleDateFormatMap.DateFormat)) {
                                            fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Report Param To Date: ';
                                            errorItem.msg    =  'Invalid '+ getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            etDate='';
                                        }
                                    }
                                }
                                
                                if(stDate!='' && etDate!=''){
                                    stDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(stDate, userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                                    etDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(etDate, userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                                    if(Date.parse(stDate) > Date.parse(etDate)) {
                                            fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                            fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                            errorItem = new JBaraErrorClass();
                                            errorItem.header = 'Report Param Date: ';
                                            errorItem.msg    =  'From date should be less than To date ('+ getDisplayFieldLabel(fldObjectNameId,fldNameId)+')';
                                            errorList.push(errorItem);
                                            validEntries = false;
                                            
                                    }   
                                }   
                            }
                         }
                     
                      if(j$(this).find(".filterFieldTypeClass").val() == 'CURRENCY' || j$(this).find(".filterFieldTypeClass").val() == 'DOUBLE' || j$(this).find(".filterFieldTypeClass").val() == 'PERCENT'){
                            fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                            fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                            if(isNaN(j$.trim(j$(this).find(".filterFieldClass").val()))) {
                                errorItem = new JBaraErrorClass();
                                errorItem.header = 'Report Param Number: ';
                                errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                errorList.push(errorItem);  
                                validEntries = false;
                            }
                            else {
                                if(!fltRegEx.test(j$.trim(j$(this).find(".filterFieldClass").val()))){
                                        errorItem = new JBaraErrorClass();
                                        errorItem.header = 'Report Param Number Exceeds Allowed Limit of (10,2): ';
                                        errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                        errorList.push(errorItem);  
                                        validEntries = false;
                                }
                            }   
                        }
                        if(j$(this).find(".filterFieldTypeClass").val() == 'INTEGER' || j$(this).find(".filterFieldTypeClass").val() == 'NUMBER'){
                            var er = /^[0-9]+$/;
                            if(!er.test(j$.trim(j$(this).find(".filterFieldClass").val()))){
                                fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                                fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                                errorItem = new JBaraErrorClass();
                                errorItem.header = 'Report Param Number: ';
                                errorItem.msg    =  'Invalid '+getDisplayFieldLabel(fldObjectNameId,fldNameId);
                                errorList.push(errorItem);  
                                validEntries = false;
                            }
                        }
                     }
                    
                    
                  });
                
                
                if(j$(".uiViewSelectedFieldsTBody tr").length>0){
                    j$(".uiViewSelectedFieldsTBody tr").find(".selectedFieldLabel").each(function(){
                        if(j$.trim(j$(this).val())==''){
                            errorItem = new JBaraErrorClass();
                            errorItem.header = 'Selected field label for '+ j$(this).parent().parent().find(".objFieldLabelsTD").text() +' is missing';
                            errorItem.msg    =  '';
                            errorList.push(errorItem);
                            validEntries = false;
                        }
                    });
                    
                    
                }
                
                if(!validEntries){
                    showJBaraValidationErrors('jBaraUIViewValidationsContainer',errorList);
                    var $target = j$('html,body'); 
                    $target.animate({scrollTop: 0}, 1000);
                    hideOverLayForm();
                }
            
            return validEntries;
           }
           
           function getDisplayFieldLabel(objName,fldName){
                    if(j$("#ddHiddenFilterField option[value='" + objName + "^"+ fldName+"']").length > 0){
                        return j$("#ddHiddenFilterField option[value='" + objName + "^"+ fldName+"']").text().split(displaySeprator)[1];
                    }else{
                        return fldName;
                    }
                
           }
           function afterUIViewsSaveClick(){
            if({!(validFlag)}){
                window.top.location.href='/apex/Administration?sfdc.tabName={!JSENCODE($CurrentPage.parameters.tabId)}#Administration-UIViews';
            }
            else {
                hideOverLayForm();
            }
           }
           
           function getSelectedFieldsToSave(){
             var toSaveselectedFieldItems = new Array();
             var selectedFieldItem;
             var intDisplayOrder=0;
             j$(".uiViewSelectedFieldsTBody tr").each(function(){
                var selectedFieldItem = {};
                selectedFieldItem.name =j$.trim(j$(this).find(".selectedFieldName").val());
                selectedFieldItem.label =j$.trim(j$(this).find(".selectedFieldLabel").val());
                selectedFieldItem.displayOrder =++intDisplayOrder;
                if(j$(this).find(".selectedFieldVisibilityMode").is(":checked")){
                    selectedFieldItem.visibilityMode =true;
                }else {
                    selectedFieldItem.visibilityMode =false;
                }   
                selectedFieldItem.objectName=j$.trim(j$(this).find(".selectedFieldObjectName").val());
                selectedFieldItem.fieldType =j$.trim(j$(this).find(".selectedFieldType").val());
                if(j$(this).find(".selectedFieldIsGroupable").val()=='true'){
                    selectedFieldItem.isGroupable =true;
                }
                else {
                    selectedFieldItem.isGroupable =false;
                }   
                selectedFieldItem.hasJBCXMNS = (j$.trim(j$(this).find(".selectedFieldHasJBCXM").val()) == "true" ) ? true : false;
                selectedFieldItem.decimalPlaces = j$.trim(j$(this).find(".selectedFieldDecimalPlaces").val());
                toSaveselectedFieldItems.push(selectedFieldItem);
                
                
             });
             return toSaveselectedFieldItems;
            
           }
           
           function getFilterConditionsToSave(){
             var toSavefilterItems = new Array();
             var filterItem;
             var fldFilterVal;
             var nullCheckbox;
           
             j$("#tbodyFilterContainer tr.trMainFilterRow").each(function(){
                fldFilterVal='';
                nullCheckbox = j$(this).find(".tdFilterNullCheck input");
                //This is the fix for IE 8
                if(j$(this).find(".filterFieldTypeClass").val() == 'BOOLEAN'){
                    j$(this).find(".filterFieldClass").val('1');
                    fldFilterVal='1';
                }
                
                else if(j$(this).find(".filterFieldTypeClass").val()=='PICKLIST' || j$(this).find(".filterFieldTypeClass").val()=='CUSTOMLOOKUP'){
                    fldFilterVal = (j$(this).find(".filterFieldClass option:selected").length==0)?'': 'hasVal';
                }
                else if(j$(this).find(".filterFieldTypeClass").val()=='MULTIPICKLIST'){
                   fldFilterVal = (j$(this).find(".filterFieldClass:eq(4) option").length==0)?'': 'hasVal';
                }
                else {
                    fldFilterVal = j$.trim(j$(this).find(".filterFieldClass").val());
                }

                if(nullCheckbox.length > 0 && nullCheckbox.is(":checked")){
                    fldFilterVal = "1";
                }
                if(j$(this).find(".ddFilterFields option:selected").val() != "" && fldFilterVal.length > 0 && j$(this).find(".dummyOperatorFields option:selected").val() != ''){
                     fldObjectNameId =j$(this).find(".ddFilterFields").val().split('^')[0];
                     fldNameId = j$(this).find(".ddFilterFields").val().split('^')[1];
                     filterItemValue='';    
                     filterItem = new filterConditionClass();
                     filterItem.name = fldNameId;
                     filterItem.objectName=fldObjectNameId;
                     filterItem.fieldType =j$.trim(j$(this).find(".filterFieldTypeClass").val());
                     filterItem.operator =j$.trim(j$(this).find(".dummyOperatorFields").val());
                     filterItem.isNull = (j$(this).find(".tdFilterNullCheck input").length > 0) ? j$(this).find(".tdFilterNullCheck input").is(":checked") : false;
                     filterItem.value = getFilterFieldValueByType(j$(this),filterItem);

                     if(filterItemValue.toString()!='' || nullCheckbox.is(":checked")){
                        toSavefilterItems.push(filterItem);
                     }  
                }
               
                
             });
           
             return toSavefilterItems;
           
           }
           function getFilterFieldValueByType(rowItem, filterItem) {
                filterItemValue = '';
                if (j$(rowItem).find(".filterFieldTypeClass").val() == 'MULTIPICKLIST') {
                    if (j$(rowItem).find(".tdFilterValue ").find(".multiSelectPicklistTable").find(".multiSelectPicklistRow").find("select:eq(1) option").length > 0) {
                        filterItemValue = "("
                        j$(rowItem).find(".tdFilterValue ").find(".multiSelectPicklistTable").find(".multiSelectPicklistRow").find("select:eq(1) option").each(function () {
                            filterItemValue += j$(this).text().replace(/'/g, "\\'") + '^,^';
                        });
                        filterItemValue = filterItemValue.substring(0, filterItemValue.length - 3) + ')';
                    }
            
                } else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'CUSTOMLOOKUP') {
                    if (j$(rowItem).find(".tdFilterValue ").find("select:eq(0) option:selected").length > 0) {
                        filterItemValue = "("
                        j$(rowItem).find(".tdFilterValue ").find("select:eq(0) option:selected").each(function () {
                            filterItemValue += "'" + j$(this).val().replace(/'/g, "\\'") + "',";
                        });
                        filterItemValue = filterItemValue.substring(0, filterItemValue.length - 1) + ')';
                    }
            
                }
                else if(j$(rowItem).find(".filterFieldTypeClass").val() == 'PICKLIST') {
                    if(j$(rowItem).find(".tdFilterValue").find("select:eq(0)").attr("multiple")) {
                        filterItemValue = "("
                        j$(rowItem).find(".tdFilterValue").find("select:eq(0) option:selected").each(function () {
                            filterItemValue += "'" + j$(this).val().replace(/'/g, "\\'") + "',";
                        });
                        filterItemValue = filterItemValue.substring(0, filterItemValue.length - 1) + ')';
                    }
                    else {
                        filterItemValue = j$(rowItem).find(".tdFilterValue").find("select:eq(0)").val();
                    }
                }
                 else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'BOOLEAN') {
                    filterItemValue = j$(rowItem).find(".filterFieldClass").is(":checked");
                } else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'USERLOOKUP') {
                    filterItemValue = (j$(rowItem).find(".filterFieldClass").val() == 'cu') ? '@@CURRENTUSER' : j$.trim(j$(rowItem).find(".otherusername").val());
                } else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'DATE' || j$(rowItem).find(".filterFieldTypeClass").val() == 'DATETIME') {
                    if (j$(rowItem).find(".filterFieldClass").val() != 'JBcustom') {
                        filterItemValue = j$(rowItem).find(".filterFieldClass").val();
                        if (j$(rowItem).find(".filterFieldTypeClass").val() == 'DATE') {
                            filterItem.fieldType = 'TIMEFRAMENORMALDATE';
            
                        } else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'DATETIME') {
                            filterItem.fieldType = 'TIMEFRAMENORMALDATETIME';
                        }
                    } else if (j$(rowItem).find(".filterFieldClass").val() == 'JBcustom') {
                        if (j$(rowItem).find(".filterFieldTypeClass").val() == 'DATE') {
                            filterItem.fieldType = 'TIMEFRAMECUSTOMDATE';
            
                        } else if (j$(rowItem).find(".filterFieldTypeClass").val() == 'DATETIME') {
                            filterItem.fieldType = 'TIMEFRAMECUSTOMDATETIME';
                        }
                        if (j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameStartDateInput").val()) != '' && j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameEndDateInput").val()) != '') {
                            fromDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameStartDateInput").val()), userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                            toDate = JBARAformatDate(new Date(JBARA_getDateFromFormat(j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameEndDateInput").val()), userLocaleDateFormatMap.DateFormat)), 'M/d/yyyy');
                            //filterItemValue = j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameStartDateInput").val()) + '^'+ j$.trim(j$(rowItem).find(".jbaraDummyTimeFrameEndDateInput").val());
                            filterItemValue = fromDate + '^' + toDate;
                        }
                    }
                } else {
                    filterItemValue = j$(rowItem).find(".filterFieldClass").val();
                }
                
                return filterItemValue;
            }
            function getReportParamsToSave(){
             var toSaveReportParamItems = new Array();
             var reportParamItem;
             var nullCheckbox;
             j$("#tbodyReportParamContainer").find(".trMainFilterRow").each(function(){
                 nullCheckbox = j$(this).find(".tdFilterNullCheck input");
                if(j$(this).find(".ddReportParamFields option:selected").val() != ""){
                        reportParamItem = new reportParamClass();
                        fldObjectNameId =j$(this).find(".ddReportParamFields").val().split('^')[0];
                        fldNameId = j$(this).find(".ddReportParamFields").val().split('^')[1];
                        var fldSelector= fldObjectNameId + fldNameId;
                        var spanReportFilter =j$(this);
                        reportParamItem.fieldName =fldNameId;
                        reportParamItem.objectName =fldObjectNameId;
                        reportParamItem.ctrlType = getReportFilterControlType(spanReportFilter);
                        if(reportParamItem.ctrlType!='timeframe'){
                            reportParamItem.ctrlData =JSON.stringify(getReportFilterControlData(spanReportFilter));
                        }
                        else {
                            reportParamItem.ctrlData ='[]';
                        }    
                        
                        reportParamItem.operatorsList =JSON.stringify(getReportFilterOperators(spanReportFilter)); 
                        reportParamItem.label = j$(this).find(".selectedReportParamLabel").val();
                        reportParamItem.fieldType = j$(spanReportFilter).find(".filterFieldTypeClass").val();
                        if(j$(this).find(".dummyOperatorFields ").val()!='' && j$(this).find(".filterFieldClass").val()!=''){
                            reportParamItem.value = getFilterFieldValueByType(j$(this),reportParamItem);
                            reportParamItem.selectedOperator = j$.trim(j$(this).find(".dummyOperatorFields").val());
                        }
                        else {
                            reportParamItem.value = '';
                            reportParamItem.selectedOperator = '';
                            if(reportParamItem.fieldType =='DATE' || reportParamItem.fieldType =='DATETIME'){
                                if(j$(this).find(".filterFieldClass").val()!='JBcustom'){
                                        if(j$(this).find(".filterFieldTypeClass").val() == 'DATE'){
                                            reportParamItem.fieldType ='TIMEFRAMENORMALDATE';
                                            
                                        }
                                        else if(j$(this).find(".filterFieldTypeClass").val() =='DATETIME'){
                                            reportParamItem.fieldType ='TIMEFRAMENORMALDATETIME';
                                        }   
                                    }
                              else if(j$(this).find(".filterFieldClass").val()=='JBcustom'){
                                    if(j$(this).find(".filterFieldTypeClass").val() == 'DATE'){
                                        reportParamItem.fieldType ='TIMEFRAMECUSTOMDATE';
                                        
                                    }
                                    else if(j$(this).find(".filterFieldTypeClass").val() =='DATETIME'){
                                        reportParamItem.fieldType ='TIMEFRAMECUSTOMDATETIME';
                                    }
                                    
                                }
                            }
                        }

                        //alert(reportParamItem.value);
                        if(j$(this).next("tr").hasClass("trReportConditionOperatorRow")){
                            reportParamItem.logicalOperator =j$(this).next("tr").find(".ddReportConditionOperator").val();
                         }
                         else{
                            reportParamItem.logicalOperator ='';
                         }
                         if(nullCheckbox.length > 0 && nullCheckbox.is(":checked")){
                                reportParamItem.isNull = true;
                                reportParamItem.value = '';
                                reportParamItem.selectedOperator = j$.trim(j$(this).find(".dummyOperatorFields").val());
                         }else{
                             reportParamItem.isNull = false;
                         }
                        toSaveReportParamItems.push(reportParamItem);
            
                    }
              });
                
             return toSaveReportParamItems;
           }
           
           function getReportFilterControlType(reportFilterContainer){
                var strFieldType = j$(reportFilterContainer).find(".filterFieldTypeClass").val();
                var strControlType ='text';
                    if(strFieldType=='DATE' || strFieldType=='DATETIME'){
                        strControlType ='timeframe';
                    }
                    else if(strFieldType=='MULTIPICKLIST' || strFieldType=='CUSTOMLOOKUP' || strFieldType=='PICKLIST' ){
                        strControlType = 'multiselect';
                    }
                    else if(strFieldType=='BOOLEAN'){
                        strControlType = 'checkbox';
                    }
                    else {
                        if(j$(reportFilterContainer).find(".filterFieldClass").is("input")){
                            strControlType='text';
                        }
                        else if(j$(reportFilterContainer).find(".filterFieldClass").is("select")){
                            strControlType='select';
                        }
                        
                        
                    }
                return strControlType;
           }
           
            function getReportFilterControlData(reportFilterContainer){
                var toSaveReportParamControlData = new Array();
                var reportParamControlDataItem;
                
                if(j$(reportFilterContainer).find(".filterFieldClass").is("select")){
                    if(j$(reportFilterContainer).find(".filterFieldTypeClass").val()=='MULTIPICKLIST'){
                        var ctrlDataOptions =j$(reportFilterContainer).find(".filterFieldClass").eq(0).find("option");
                     }
                     else{
                        var ctrlDataOptions =j$(reportFilterContainer).find(".filterFieldClass").find("option");
                     }
                    j$(ctrlDataOptions).each(function(){
                        reportParamControlDataItem = new genericKeyValueClass();
                        reportParamControlDataItem.key= j$(this).val();
                        reportParamControlDataItem.value= j$(this).text();
                        toSaveReportParamControlData.push(reportParamControlDataItem);
                    });
                
                }
                
                return toSaveReportParamControlData;
           }
           
           function getReportFilterOperators(reportFilterContainer){
                var toSaveReportParamOperators = new Array();
                var reportParamOperatorItem;
                var operatorOptions = j$(reportFilterContainer).find(".ddOperatorClass").find("option");
                j$(operatorOptions).each(function(){
                    reportParamOperatorItem = new genericKeyValueClass();
                    reportParamOperatorItem.key= j$(this).val();
                    reportParamOperatorItem.value= j$(this).text();
                        toSaveReportParamOperators.push(reportParamOperatorItem);
                });
                
                return toSaveReportParamOperators;
           }
           
           
           function cancelClick(){
                window.top.location.href='/apex/Administration?sfdc.tabName={!JSENCODE($CurrentPage.parameters.tabId)}#Administration-UIViews';
           }
        </script>
     </apex:outputPanel>
    <div id="gs-app-container">
    <div class="gs-module-container">
    <!-- <apex:sectionHeader title="UI Views"/>
    <a href="/apex/Administration?sfdc.tabName={!JSENCODE($CurrentPage.parameters.tabId)}#Administration-UIViews" style="text-decoration:none;">&nbsp;«&nbsp;Back</a> -->
    <apex:form >
        <apex:actionFunction name="actionUIViewtabChange" action="{!uiViewsTabChange}" reRender="jsUIFormPanel,filterFieldsHiddenPanel,jbaraUIViewFormErrorMessages" oncomplete="return afterUIViewsTabChange()">
        <apex:param name="uiTabName" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="actionSaveView" action="{!saveUiView}" reRender="jsUIFormPanel,jbaraUIViewFormErrorMessages" oncomplete="return afterUIViewsSaveClick()">
        </apex:actionFunction>
        <apex:actionFunction name="actionSaveAsView" action="{!saveUiView}" reRender="jsUIFormPanel,jbaraUIViewFormErrorMessages" oncomplete="return afterUIViewsSaveClick()">
        </apex:actionFunction>
        <apex:actionFunction name="actAdvanceGetSelectedField" action="{!populateSelectedFilterField}" reRender="filterFieldsHiddenPanel" oncomplete="return showSelectedFields()">
        <apex:param name="selectedObj" value="" />
        <apex:param name="selectedField" value="" />
       </apex:actionFunction>
       <apex:actionFunction name="actAdvanceReportGetSelectedField" action="{!populateSelectedFilterField}" reRender="filterFieldsHiddenPanel" oncomplete="return showReportParamSelectedFields()">
        <apex:param name="selectedObj" value="" />
        <apex:param name="selectedField" value="" />
    </apex:actionFunction>
     <apex:pageBlock title="UI Views" mode="edit">
         <apex:pageMessages id="jbaraUIViewFormErrorMessages" />
          <span Id="jBaraUIViewValidationsContainer"></span>  
        <div class="pbSubheader first tertiaryPalette">
            <span class="pbSubExtra">
                <span class="requiredLegend">
                    <span class="requiredExampleOuter">
                        <span class="requiredExample">&nbsp;</span>
                    </span>
                    <span class="requiredMark">*</span>
                    <span class="requiredText"> = Required Information</span>
                </span>
            </span>
            <h3 id='formTitle'>Step 1. Select Tab Name</h3>
        </div>
        <table width="100%">
            <tbody>
               <tr>
                    <td class="labelCol" width="20%">
                           Tab Name:
                     </td>
                    <td width="80%">
                      <div style="position:relative;">
                      <div class="requiredField"></div>
                      <apex:outputPanel layout="block">
                        <apex:outputPanel layout="block" />
                             <apex:selectList size="1" title="Tab Name" value="{!uiTabName}" styleClass="ddTabsList">
                                 <apex:selectOptions value="{!uiViewTabList}"/>
                                <!--  JB-2447
                                <apex:selectoption itemLabel="Select" itemValue=""></apex:selectoption>
                                <apex:selectoption itemLabel="Cases" itemValue="Cases"></apex:selectoption>
                                <apex:selectoption itemLabel="Customers" itemValue="Customers"></apex:selectoption>
                                <apex:selectoption itemLabel="Customer 360" itemValue="Customer360"></apex:selectoption>
                                <apex:selectoption itemLabel="Churn" itemValue="Churn"></apex:selectoption>
                                <apex:selectoption itemLabel="NPS" itemValue="NPS"></apex:selectoption>
                                <apex:selectoption itemLabel="Survey Participants" itemValue="SurveyParticipants"></apex:selectoption>
                                <apex:selectoption itemLabel="Survey Detail Report" itemValue="SurveyDetailReport"></apex:selectoption>
                                <apex:selectoption itemLabel="Transactions" itemValue="Transactions"></apex:selectoption>
                                <apex:selectoption itemLabel="User Adoption" itemValue="UserAdoption"></apex:selectoption>
                                -->
                            </apex:selectList>
                     </apex:outputPanel>
                     </div>
                   </td>
    
                </tr>
                
            </tbody>
        </table>
        
        <div id="divViewNameSelector" style="display:none;">
        <div class="pbSubheader first tertiaryPalette">
            <h3 id='formTitle'>Step 2. Enter View Name</h3>
        </div>
        <table  width="100%">
            <tbody>
               <tr>
                    <td class="labelCol" width="20%">
                           View Name:
                     </td>
                    <td width="80%">
                      <apex:outputPanel styleClass="requiredInput" layout="block">
                        <apex:outputPanel styleClass="requiredBlock" layout="block" />
                            <apex:inputText size="40" maxlength="40" StyleClass="jbaraDummyUIViewInputCtrl viewNameInput" />
                            <span class="spanChkDefault"><input type="checkBox" id="chkDefaultView" /> Default View</span>
                     </apex:outputPanel>
                    
                   </td>
    
                </tr>
                
            </tbody>
        </table>
        </div>
        
        <div id="divFilterSelector" style="display:none;">
            <div class="pbSubheader first tertiaryPalette">
                <h3 id='formTitle'>Step 3. Specify Filter Criteria</h3>
            </div>
            <div style="padding-left:30px;font-weight:bold;'">
                <table width="540px" id="tblFilterContainer">
                    <thead>
                       <tr id="theadFilterContainer">
                            <td width="240" >
                                  Fields
                             </td>
                            <td  width="100">
                              Operator
                           </td>
                            <td  width="200">
                              Value
                              <select id="ddHiddenFilterField" style="display: none; " >
                              </select>
                           </td>
                           <td  width="25">&nbsp;</td>
                        </tr>
                     </thead>
                     <tbody id="tbodyFilterContainer">   
                        
                    </tbody>
                </table>
                <span class="addRemoveControl" id="frowButtons" style="display: table-row; ">
                    <a href="javascript:void(0)" OnClick="addUIViewFilterRow();" id="fAddRowLink" style="">Add Row</a>
                    <span id="fAddRowLinkGreyed" class="greyedLink" style="display:none;">Add Row</span>
                    &nbsp;&nbsp;<a href="javascript:void(0)" OnClick="removeUIViewFilterRow();" id="fRemoveRowLink" style="display: none; ">Remove Row</a>
                    <span id="fRemoveRowLinkGreyed" class="greyedLink">Remove Row</span>
                </span>
            </div>
        </div>
        <div id="divReportParamSelector" style="display:none;">
            <div class="pbSubheader first tertiaryPalette">
                <h3 id='formTitle'>Step 4. Specify Report Params</h3>
            </div>
            <div style="padding-left:30px;font-weight:bold;'">
                <table width="940px" id="tblReportParamContainer" border="0" cellspacing="2">
                    <thead>
                       <tr id="theadReportParamContainer">
                            <td width="240" >
                                  Name
                             </td>
                            <td  width="200">
                                 Label
                           </td>
                           <td  width="100">
                                 Operator
                           </td>
                            <td  width="200">
                                Value
                             
                           </td>
                          <td  width="25">&nbsp;</td>
                          <td  width="25">&nbsp;</td>
                          <td  width="35">&nbsp;</td>
                        </tr>
                     </thead>
                     <tbody id="tbodyReportParamContainer">   
                        
                    </tbody>
                </table>
                
            </div>
        </div>
        <div id="divFieldsSelector" style="display:none;">
                <div class="pbSubheader first tertiaryPalette">
                    <h3 id='formTitle'>Step 5. Select Fields to Display</h3>
                </div>
                <div style="padding-left:30px;font-weight:bold;'">
                    <table cellpadding="2" cellspacing="2">
                        <tbody>
                            <tr>
                                <td class="selectCell" valign="top" style="width:200px;">
                                    <div class="selectTitle"><label for="colselector_select_0">Available Fields</label></div>
                                    <div class="ddColumnFilter"><input  class="ddColumnFilterInput" type="text" style="width:234px;" placeholder="Type filter text"></input></div>
                                    <select id="ddColumnSelectorList" multiple="multiple" name="" size="25" style="max-width:260px;width:237px;height:inherit;">
                                    </select>
                                </td>
                                <td class="buttonCell" valign="top" style="vertical-align:middle;width:100px;">
                                    <div class="text">Add</div>
                                    <div class="text">
                                        <a onClick="addUIViewFields();"><img src="/s.gif" alt="Add" class="rightArrowIcon" title="Add" /></a>
                                    </div>
                                    <div class="text">
                                        <a onClick="removeUIViewFields();"><img src="/s.gif" alt="Remove" class="leftArrowIcon" title="Remove" /></a>
                                    </div>
                                    <div class="duelingText">Remove</div>
                                </td>
                                <td class="selectCell" valign="top" style="width:840px;">
                                    <div class="selectTitle"><label for="colselector_select_1">Selected Fields</label></div>
                                    <div style="width:840px;height:420px;overflow: auto;background-color:#FFFFFF;">
                                        <table id="tblUIViewSelectedFields">
                                            <thead>
                                            <tr class="ui-state-default uiViewSelectedFieldsHeaderRow">
                                                <td width="268px">Name</td>
                                                <td width="328px">Label</td>
                                                <td width="123px">Show By Default</td>
                                                <td width="131px">Actions</td>
                                            </tr>   
                                            </thead>
                                            <tbody class="uiViewSelectedFieldsTBody">
                                            </tbody>
                                            
                                        </table>
                                    </div>
                                    
                                </td>
                            
                            </tr>
                        </tbody>
                    </table>
                </div>
        </div>
        
        <div id="divSharingSelector" style="display:none;">
            <div class="pbSubheader first tertiaryPalette">
                <h3 id='formTitle'>Step 5. Restrict Visibility</h3>
            </div>
            <div style="padding-left:30px;font-weight:bold;'">
                <input class=" radio" id="sharePublic" name="accessMode" type="radio" value="Public" checked="checked" /> Public
                <br/>
                <input class=" radio" id="sharePrivate" name="accessMode"  type="radio" value="Private" /> Private
            </div>
        </div>  
         <apex:pageBlockButtons location="bottom" style="text-align:center;">
                <input type="button" value="Save" class="btn btnSaveClick" onClick="showOverLayForm('S');saveViewClick();"/>&nbsp;
                <input type="button" value="Save As" class="btn btnSaveAsClick" onClick="showOverLayForm('S');saveAsViewClick();"/>&nbsp;
                <input type="button" value="Cancel" class="btn btnCancelClick" onClick="showOverLayForm('C');cancelClick();"/>&nbsp;
                </apex:pageBlockButtons>
     </apex:pageBlock>
      <apex:inputText value="{!jsonUIView}" styleClass="hdnViewJson" Style="display:none;" /> 
 </apex:form>
  <apex:form >
  <div id = "userlookupDiv" style = "display:none;">
     <select onchange = "changeUserLookupType(this, j$(this).closest('.trMainFilterRow'));" class = "filterFieldClass">
            <option value = "cu">Current User</option>
            <option value = "ou">Other User</option>
     </select>
     <input type = "text" class = "otherusername" style = "display:none;" placeholder="Enter Username" />
  </div>
  
  <div id="jBTFDateRangeSelectionDiv" style="display:none;">
        <select onchange="timeFrameDateRangeChanges(this.options[this.selectedIndex].value,this)" class="filterFieldClass jBTFDateRangeSelection" >
            <option value="JBcustom">Custom</option>
    
            <optgroup label="Fiscal Year"><option value="JBcurfy" selected="selected">Current FY</option>
                <option value="JBprevfy">Previous FY</option>
                <option value="JBprev2fy">Previous 2 FY</option>
                <option value="JBago2fy">2 FY Ago</option>
                <option value="JBnextfy">Next FY</option>
                <option value="JBprevcurfy">Current and Previous FY</option>
                <option value="JBprevcur2fy">Current and Previous 2 FY</option>
                <option value="JBcurnextfy">Current and Next FY</option>
            </optgroup>
            <apex:outputPanel id="renderDrilldownComponentPanel" rendered="{!If(CustomFiscalYearSettingsEnabled == false , true, false)}">
                <optgroup label="Fiscal Quarter"><option value="JBcurrentfq">Current FQ</option>
                    <option value="JBcurnextfq">Current and Next FQ</option>
                    <option value="JBcurprevfq">Current and Previous FQ</option>
                    <option value="JBnextfq">Next FQ</option>
                    <option value="JBprevfq">Previous FQ</option>
                    <option value="JBcurnext3fq">Current and Next 3 FQ</option>
                </optgroup>
            </apex:outputPanel>
            <optgroup label="Calendar Year"><option value="JBcury">Current CY</option>
                <option value="JBprevy">Previous CY</option>
                <option value="JBprev2y">Previous 2 CY</option>
                <option value="JBago2y">2 CY Ago</option>
                <option value="JBnexty">Next CY</option>
                <option value="JBprevcury">Current and Previous CY</option>
                <option value="JBprevcur2y">Current and Previous 2 CY</option>
                <option value="JBcurnexty">Current and Next CY</option>
            </optgroup>
    
            <optgroup label="Calendar Quarter"><option value="JBcurrentq">Current CQ</option>
                <option value="JBcurnextq">Current and Next CQ</option>
                <option value="JBcurprevq">Current and Previous CQ</option>
                <option value="JBnextq">Next CQ</option>
                <option value="JBprevq">Previous CQ</option>
                <option value="JBcurnext3q">Current and Next 3 CQ</option>
            </optgroup>
    
            <optgroup label="Calendar Month"><option value="JBlastmonth">Last Month</option>
                <option value="JBthismonth">This Month</option>
                <option value="JBnextmonth">Next Month</option>
                <option value="JBlastthismonth">Current and Previous Month</option>
                <option value="JBthisnextmonth">Current and Next Month</option>
            </optgroup>
    
            <optgroup label="Calendar Week"><option value="JBlastweek">Last Week</option>
                <option value="JBthisweek">This Week</option>
                <option value="JBnextweek">Next Week</option>
            </optgroup>
    
            <optgroup label="Day"><option value="JByesterday">Yesterday</option>
                <option value="JBtoday">Today</option>
                <option value="JBtomorrow">Tomorrow</option>
                <option value="JBlast7">Last 7 Days</option>
                <option value="JBlast30">Last 30 Days</option>
                <option value="JBlast60">Last 60 Days</option>
                <option value="JBlast90">Last 90 Days</option>
                <option value="JBlast120">Last 120 Days</option>
                <option value="JBnext7">Next 7 Days</option>
                <option value="JBnext30">Next 30 Days</option>
                <option value="JBnext60">Next 60 Days</option>
                <option value="JBnext90">Next 90 Days</option>
                <option value="JBnext120">Next 120 Days</option>
            </optgroup>
        </select>
    </div>
 <apex:outputPanel id="filterFieldsHiddenPanel" >
            <apex:outputPanel rendered="{!renderHiddenFilterPanel}" styleClass="spanAllFilterContainer">
            <apex:repeat value="{!selectedFilterFieldsList}" var="afield" >
                <apex:repeat value="{!afield.filterFieldname}" var="fldName" >
                  <span class="{!afield.filterObjectName}{!fldName}Span" dummyFilterFieldAttr="fldFilterSubContainer" style = "display:none;">
                    <apex:selectList size="1" styleClass="dummyOperatorFields ddOperatorClass">
                            <apex:selectOptions value="{!afield.filterOperator}"/>
                    </apex:selectList>~
                     <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'Account',true,false)}">
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'STRING' && afield.filterFieldtype != 'USERLOOKUP' 
                                                        && afield.filterFieldtype != 'PERCENT' && afield.filterFieldtype != 'DOUBLE' 
                                                        && afield.filterFieldtype != 'CURRENCY' && afield.filterFieldtype != 'NUMBER' 
                                                        && afield.filterFieldtype != 'DATETIME' &&  afield.filterFieldtype != 'DATE' 
                                                        && afield.filterFieldtype != 'PICKLIST'
                                                        && afield.filterFieldtype != 'BOOLEAN' 
                                                        ,true,false)}">
                            <apex:inputField value="{!accountFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'STRING' || afield.filterFieldtype == 'PERCENT' || afield.filterFieldtype == 'DOUBLE' || afield.filterFieldtype == 'CURRENCY' || afield.filterFieldtype == 'NUMBER',true,false)}">
                            <apex:inputText value="{!accountFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                            <apex:inputCheckbox value="{!accountFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATE' || afield.filterFieldtype == 'DATETIME',true,false)}">
                            <span class="dateInput dateOnlyInput">
                                <apex:inputText value="{!accountFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                            </span> 
                        </apex:outputPanel>
                        
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                            <span class="userlookupValueDD">
                              
                            </span> 
                        </apex:outputPanel>
                        
                        <!-- JB-2447 -->
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">                                                                    
                            <apex:selectList value="{!accountFieldObj[fldName]}" size="1" styleClass="{!fldName} filterFieldClass customer-pickList" multiselect="true">
                                <apex:selectOptions value="{!picklistValuesMap[afield.filterObjectName+'~'+fldName]}"/>
                            </apex:selectList>                              
                        </apex:outputPanel>
                        
                    </apex:outputPanel>
                  
                  
                  
                  
                  
                  
                  <apex:outputPanel style="display:none;" rendered="{!IF(uiTabName == 'Customers' && afield.filterFieldtype == 'PICKLIST',true,false)}">
                             <span class="customersPickList">
                             </span>
                  </apex:outputPanel>
                    <apex:outputPanel rendered="{!IF(uiTabName == 'Customers' || uiTabName == 'Scorecard',true,false)}">
                        <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CustomerInfo__c' ,true,false)}">
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                            <span class="userlookupValueDD">
                              
                            </span> 
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'CUSTOMLOOKUP' ,true,false)}">
                           <apex:outputPanel rendered="{!IF(fldName == 'Stage__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!CustomerStagePicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'Status__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!CustomerStatusPicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(fldName == 'RevenueBand__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!RevenueBandList}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'TrendIndicator__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ScorecardTrendList}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                
                                
                                
                                <apex:outputPanel rendered="{!IF(fldName == 'CurScoreId__c' || fldName == 'PrevScoreId__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ScorecardSSDDList}"/>
                                    </apex:selectList>
                                </apex:outputPanel>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATE' || afield.filterFieldtype == 'DATETIME',true,false)}">
                            <span class="dateInput dateOnlyInput">
                                <apex:inputText value="{!customerFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                            </span> 
                        </apex:outputPanel>
                         <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">
                            <apex:selectList value="{!customerFieldObj[fldName]}" size="1" styleClass="{!fldName} filterFieldClass customer-pickList" multiselect="true">
                                <apex:selectOptions value="{!picklistValuesMap[afield.filterObjectName+'~'+fldName]}"/>
                            </apex:selectList>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'STRING' || afield.filterFieldtype == 'PERCENT' || afield.filterFieldtype == 'DOUBLE' || afield.filterFieldtype == 'CURRENCY' || afield.filterFieldtype == 'NUMBER',true,false)}">
                            <apex:inputText value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                            <apex:inputCheckbox value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                        
                        <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'STRING' && afield.filterFieldtype != 'PERCENT' 
                                                    && afield.filterFieldtype != 'DOUBLE' && afield.filterFieldtype != 'CURRENCY' 
                                                    && afield.filterFieldtype != 'NUMBER'
                                                    && afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' 
                                                    && afield.filterFieldtype != 'PICKLIST'
                                                    &&  afield.filterFieldtype != 'CUSTOMLOOKUP'
                                                    &&  afield.filterFieldtype != 'USERLOOKUP'
                                                    && afield.filterFieldtype != 'BOOLEAN'
                                                    ,true,false)}">
                            <apex:inputField value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                        </apex:outputPanel>
                    
                        </apex:outputPanel>
                        
                            
                     </apex:outputPanel> 
                    <apex:outputPanel rendered="{!IF(uiTabName == 'Transactions',true,false)}">
                         <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'TransHeader__c',true,false)}">
                             <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedDate' || fldName == 'LastModifiedBy.Name'
                                                          || fldName == 'OrderType__c' || fldName == 'ChurnReason__c',true,false)}">
                                <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedDate',true,false)}">
                                    <span class="dateInput dateOnlyInput">
                                        <apex:inputText value="{!transFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                                    </span> 
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedBy.Name',true,false)}">
                                  <span class="userlookupValueDD">
                                      
                                   </span> 
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(fldName == 'OrderType__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!BookingTypePicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'ChurnReason__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ChurnReasonPicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel>                         
                            </apex:outputPanel> 
                            <apex:outputPanel rendered="{!IF(fldName != 'LastModifiedDate' && fldName != 'LastModifiedBy.Name'
                                                         && fldName != 'OrderType__c' && fldName != 'ChurnReason__c',true,false)}">
                                <apex:inputField value="{!transFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                            </apex:outputPanel> 
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CustomerInfo__c',true,false)}">
                            <apex:outputPanel rendered="{!IF(fldName == 'RevenueBand__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!RevenueBandList}"/>
                                    </apex:selectList>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(fldName == 'CurScoreId__c',true,false)}">
                                <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                    <apex:selectOptions value="{!ScorecardSSDDList}"/>
                                </apex:selectList>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:outputPanel>
                   <apex:outputPanel rendered="{!IF(uiTabName == 'CTA' ,true,false)}"> 
                        <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CTA__c',true,false)}">
                       
                           <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                                <span class="userlookupValueDD">
                              
                                </span> 
                            </apex:outputPanel>
                            
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'CUSTOMLOOKUP' ,true,false)}">
                              
                            </apex:outputPanel>
                        
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATE' || afield.filterFieldtype == 'DATETIME',true,false)}">
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'STRING' || afield.filterFieldtype == 'PERCENT' || afield.filterFieldtype == 'DOUBLE' || afield.filterFieldtype == 'CURRENCY' || afield.filterFieldtype == 'NUMBER',true,false)}">
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                                <apex:inputCheckbox value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'STRING' && afield.filterFieldtype != 'PERCENT' 
                                                    && afield.filterFieldtype != 'DOUBLE' && afield.filterFieldtype != 'CURRENCY' 
                                                    && afield.filterFieldtype != 'NUMBER'
                                                    && afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' 
                                                    && afield.filterFieldtype != 'PICKLIST'
                                                    &&  afield.filterFieldtype != 'CUSTOMLOOKUP'
                                                    &&  afield.filterFieldtype != 'USERLOOKUP'
                                                    &&  afield.filterFieldtype != 'BOOLEAN'
                                                    ,true,false)}">
                             </apex:outputPanel>
                            
                        </apex:outputPanel>
                        
                        
                        
                    
                    
                        <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CustomerInfo__c',true,false)}">
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                                    <span class="userlookupValueDD">
                                      
                                    </span> 
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'CUSTOMLOOKUP' ,true,false)}">
                                   <apex:outputPanel rendered="{!IF(fldName == 'Stage__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!CustomerStagePicklist}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'Status__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!CustomerStatusPicklist}"/>
                                            </apex:selectList>
                                        </apex:outputPanel>
                                        <apex:outputPanel rendered="{!IF(fldName == 'RevenueBand__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!RevenueBandList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'TrendIndicator__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!ScorecardTrendList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'CurScoreId__c' || fldName == 'PrevScoreId__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!ScorecardSSDDList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATE' || afield.filterFieldtype == 'DATETIME',true,false)}">
                                    <span class="dateInput dateOnlyInput">
                                        <apex:inputText value="{!customerFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                                    </span> 
                                </apex:outputPanel>
                                 <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">                                                                   
                                    <apex:selectList value="{!customerFieldObj[fldName]}" size="1" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!picklistValuesMap[afield.filterObjectName+'~'+fldName]}"/>
                                    </apex:selectList>                              
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'STRING' || afield.filterFieldtype == 'PERCENT' || afield.filterFieldtype == 'DOUBLE' || afield.filterFieldtype == 'CURRENCY' || afield.filterFieldtype == 'NUMBER',true,false)}">
                                    <apex:inputText value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                                    <apex:inputCheckbox value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'STRING' && afield.filterFieldtype != 'PERCENT' 
                                                            && afield.filterFieldtype != 'DOUBLE' && afield.filterFieldtype != 'CURRENCY' 
                                                            && afield.filterFieldtype != 'NUMBER'
                                                            && afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' 
                                                            && afield.filterFieldtype != 'PICKLIST'
                                                            &&  afield.filterFieldtype != 'CUSTOMLOOKUP'
                                                            &&  afield.filterFieldtype != 'USERLOOKUP'
                                                            &&  afield.filterFieldtype != 'BOOLEAN'
                                                            ,true,false)}">
                                    <apex:inputField value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                        </apex:outputPanel>
                   </apex:outputPanel>
                    
                    <apex:outputPanel rendered="{!IF(uiTabName == 'Churn',true,false)}">
                         <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'TransHeader__c',true,false)}">
                             <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedDate' || fldName == 'LastModifiedBy.Name' 
                                                         || fldName == 'CreatedBy.Name' || fldName == 'CreatedDate'
                                                         || fldName == 'ChurnReason__c' || fldName=='OrderType__c',true,false)}">
                                <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedDate' || fldName == 'CreatedDate',true,false)}">
                                    <span class="dateInput dateOnlyInput">
                                        <apex:inputText value="{!transFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                                    </span> 
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'LastModifiedBy.Name' || fldName == 'CreatedBy.Name'  ,true,false)}">
                                      <span class="userlookupValueDD">
                                      </span>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'ChurnReason__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ChurnReasonPicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'OrderType__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ChurnBookingTypePicklist}"/>
                                    </apex:selectList>
                                </apex:outputPanel>                 
                            </apex:outputPanel> 
                            <apex:outputPanel rendered="{!IF(fldName != 'LastModifiedDate' && fldName != 'LastModifiedBy.Name' 
                                                        && fldName != 'CreatedBy.Name' && fldName != 'CreatedDate'
                                                        && fldName != 'ChurnReason__c' && fldName!='OrderType__c',true,false)}">
                                <apex:inputField value="{!transFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                            </apex:outputPanel> 
                        </apex:outputPanel>
                         <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CustomerInfo__c',true,false)}">
                                 <apex:outputPanel rendered="{!IF(fldName != 'RevenueBand__c' && fldName != 'CurScoreId__c',true,false)}">
                                    <apex:inputField value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                 </apex:outputPanel>        
                                <apex:outputPanel rendered="{!IF(fldName == 'RevenueBand__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!RevenueBandList}"/>
                                    </apex:selectList>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(fldName == 'TrendIndicator__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ScorecardTrendList}"/>
                                    </apex:selectList>
                                </apex:outputPanel> 
                                <apex:outputPanel rendered="{!IF(fldName == 'CurScoreId__c',true,false)}">
                                    <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!ScorecardSSDDList}"/>
                                    </apex:selectList>
                                </apex:outputPanel>
                         </apex:outputPanel>
                    </apex:outputPanel>
                    
                    <apex:outputPanel rendered="{!IF(uiTabName == 'UserAdoption',true,false)}">
                         <apex:outputPanel rendered="{!IF(afield.filterObjectName == 'CustomerInfo__c',true,false)}">
                            <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                                    <span class="userlookupValueDD">
                                      
                                    </span> 
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'CUSTOMLOOKUP' ,true,false)}">
                                   <apex:outputPanel rendered="{!IF(fldName == 'Stage__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!CustomerStagePicklist}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'Status__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!CustomerStatusPicklist}"/>
                                            </apex:selectList>
                                        </apex:outputPanel>
                                        <apex:outputPanel rendered="{!IF(fldName == 'RevenueBand__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!RevenueBandList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'TrendIndicator__c',true,false)}">
                                        <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!ScorecardTrendList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel> 
                                        <apex:outputPanel rendered="{!IF(fldName == 'CurScoreId__c' || fldName == 'PrevScoreId__c',true,false)}">
                                            <apex:selectList size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                                <apex:selectOptions value="{!ScorecardSSDDList}"/>
                                            </apex:selectList>
                                        </apex:outputPanel>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATE' || afield.filterFieldtype == 'DATETIME',true,false)}">
                                    <span class="dateInput dateOnlyInput">
                                        <apex:inputText value="{!customerFieldObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                                    </span> 
                                </apex:outputPanel>
                                 <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">                                                                   
                                    <apex:selectList value="{!customerFieldObj[fldName]}" size="1" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!picklistValuesMap[afield.filterObjectName+'~'+fldName]}"/>
                                    </apex:selectList>                              
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'STRING' || afield.filterFieldtype == 'PERCENT' || afield.filterFieldtype == 'DOUBLE' || afield.filterFieldtype == 'CURRENCY' || afield.filterFieldtype == 'NUMBER',true,false)}">
                                    <apex:inputText value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                                    <apex:inputCheckbox value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'STRING' && afield.filterFieldtype != 'PERCENT' 
                                                            && afield.filterFieldtype != 'DOUBLE' && afield.filterFieldtype != 'CURRENCY' 
                                                            && afield.filterFieldtype != 'NUMBER'
                                                            && afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' 
                                                            && afield.filterFieldtype != 'PICKLIST'
                                                            &&  afield.filterFieldtype != 'CUSTOMLOOKUP'
                                                            &&  afield.filterFieldtype != 'USERLOOKUP'
                                                            &&  afield.filterFieldtype != 'BOOLEAN'
                                                            ,true,false)}">
                                    <apex:inputField value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                            
                        </apex:outputPanel>
                        
                    </apex:outputPanel> 
                    
                    
                    <!--  JB-2447 -->
                    <apex:outputPanel rendered="{!IF(isLinkedToSection == true && afield.filterObjectName != 'Account', true,false)}">
                                
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'DATETIME' || afield.filterFieldtype == 'DATE' ,true,false)}">
                                    <span class="dateInput dateOnlyInput">
                                            <apex:inputText value="{!customRelatedListObj[fldName]}" size="12" styleClass="{!fldName} filterFieldClass" />
                                    </span>
                                </apex:outputPanel>

                                <apex:outputPanel rendered="{!IF((CONTAINS(fldName, '__r.Name') && afield.filterFieldtype != 'USERLOOKUP' && afield.filterFieldtype != 'BOOLEAN') ,True, False)}">
                                        <apex:inputText styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'INTEGER',true,false)}">
                                        <apex:inputText value="{!customRelatedListObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                               </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF((afield.filterFieldtype == 'STRING' && Not(CONTAINS(fldName, '__r.Name'))),true,false)}">
                                        <apex:inputText value="{!customRelatedListObj[fldName]}" styleClass="{!fldName} filterFieldClass" />

                               </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'INTEGER',true,false)}">
                                        <apex:inputText value="{!customRelatedListObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                               </apex:outputPanel>
                               <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'BOOLEAN',true,false)}">
                                    <apex:inputCheckbox value="{!customerFieldObj[fldName]}" styleClass="{!fldName} filterFieldClass" />
                              </apex:outputPanel>
                               <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'PICKLIST',true,false)}">                                                                 
                                    <apex:selectList value="{!customerFieldObj[fldName]}" size="5" styleClass="{!fldName} filterFieldClass" multiselect="true">
                                        <apex:selectOptions value="{!picklistValuesMap[afield.filterObjectName+'~'+fldName]}"/>
                                    </apex:selectList>                              
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'PICKLIST' && afield.filterFieldtype != 'INTEGER' && afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' && afield.filterFieldtype != 'USERLOOKUP' && afield.filterFieldtype != 'STRING',true,false)}">
                                    <apex:inputField value="{!customRelatedListObj[fldName]}"  styleClass="{!fldName} filterFieldClass" />
                                </apex:outputPanel>
                                
                                <apex:outputPanel rendered="{!IF(afield.filterFieldtype == 'USERLOOKUP' ,true,false)}">
                                     <span class="userlookupValueDD">
                                     
                                     </span> 
                                </apex:outputPanel>
                    </apex:outputPanel>  
                    
                    
                    
                    <apex:inputText value="{!afield.filterFieldtype}" styleClass="filterFieldTypeClass"  style="display:none;"/> 
                    <apex:inputText value="{!afield.filterObjectName}" styleClass="filterFieldObjectClass"  style="display:none;"/> 
                    <apex:inputText value="{!afield.filterFieldname}" styleClass="filterFieldNameClass"  style="display:none;"/> 
                    <apex:inputText value="{!afield.filterFieldLabel}" styleClass="filterFieldLabelClass"  style="display:none;"/> 
                    ~
                      <apex:outputPanel rendered="{!IF(afield.filterFieldtype != 'DATE' && afield.filterFieldtype != 'DATETIME' && afield.filterFieldtype != 'BOOLEAN',true,false)}">
                          <apex:inputCheckbox style="display:none;"/>
                          <span class="nullCheckTitle" data-title="{!afield.filterFieldLabel}" style="display:none;"></span>
                        </apex:outputPanel>
                  </span>
                  </apex:repeat>
            </apex:repeat>
            <script>
                j$(".spanAllFilterContainer").find(".dateOnlyInput").parent().append(j$("#jBTFDateRangeSelectionDiv").html());
                j$(".spanAllFilterContainer").find(".dateOnlyInput").remove();
                j$(".spanAllFilterContainer").find(".userlookupValueDD").html(j$("#userlookupDiv").html());
                
            </script>
        </apex:outputPanel>
    </apex:outputPanel>
    
    </apex:form>
  </div>
  </div>
    <div class="overlayBackground jbaraDummyOverLayForm" style="display: none;" align="center">
     <div class="waitingHolder" style="margin:0;top:50%;left:50%;margin-right:-50%;margin-bottom:-50%;position:absolute" align="center">
        <div class="preloader-wrapper big active">
           <div class="spinner-layer spinner-blue-only">
             <div class="circle-clipper left">
               <div class="circle"></div>
             </div><div class="gap-patch">
               <div class="circle"></div>
             </div><div class="circle-clipper right">
               <div class="circle"></div>
             </div>
           </div>
         </div>
     </div>
    </div>
</apex:page>