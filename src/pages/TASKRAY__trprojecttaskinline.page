<apex:page standardController="TASKRAY__Project_Task__c" sidebar="false" showheader="false" extensions="TASKRAY.trStandardController" title="{!$Label.taskray__taskray_pagetitle}">
    <link href="{!URLFOR($Resource.trbootstrap, 'bootstrap/css/bootstrap.css')}" rel="stylesheet" type="text/css" />
    <link href="{!URLFOR($Resource.trplugins, 'jquery/custom-theme/jquery-ui-1.8.17.custom.css')}" rel="stylesheet" type="text/css" />
    <link href="{!URLFOR($Resource.trplugins, 'jquery/plugins/jquery.loadmask.css')}" rel="stylesheet" type="text/css" />
    <link href="{!URLFOR($Resource.trpopupcss)}" rel="stylesheet" type="text/css" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trplugins, 'jquery/jquery-3.5.0.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trbootstrap, 'bootstrap4/modal.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trbootstrap, 'bootstrap4/tab.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trbootstrap, 'bootstrap4/util.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trplugins, 'jquery/plugins/jquery.loadmask.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trplugins, 'jquery/plugins/canvasloadermin.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trplugins, 'jquery/plugins/sugar-1.3.9.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.TASKRAY__trplugins, 'plugins/insertion.query.min.js')}" />
    <apex:outputPanel layout="none" rendered="{!$CurrentPage.parameters.isdtp == 'p1'}">
        <script type='text/javascript' src='/javascript/jslabels?lang={!JSINHTMLENCODE(userLocale)}'></script>
    </apex:outputPanel>

    <!-- ensure these values are pulled by standard controller -->
    <apex:outputField value="{!TASKRAY__Project_Task__c.TASKRAY__Repeat_Week_Days__c}" rendered="false"/>
    
    <apex:outputPanel rendered="{!newTask}">
        <style>
            #add-tags-btn{ 
                display:none;
            }
        </style>
    </apex:outputPanel>

    <style type="text/css">
        /* Load Mask */
        .wrapper {
            left: 50%;
            position: absolute;
            top: 50%;
        }
        #canvasLoader{
            z-index:10000;
        }

        .inline-edit-toggle-btn{
            display:none;
        }

/*        .detailList tr{
            height: 46px !important;
        }
        .detailList .inlineEditWrite{
            margin-top: 0 !important;
        }
        .detailList .vfLabelColTextWrap{
            padding-top: 16px !important;
        }*/

        .pageDescription:hover{
            text-decoration: underline;
        }
        #box-iframe{
            height: 100%;
        }
        #checklist-iframe{
            height: -moz-calc(100% - 172px);
            height: -webkit-calc(100% - 172px);
            height: calc(100% - 172px);
        }
        body .bPageTitle .ptBody .pageType{
            margin-left: 20px;
            display:inline-block;
            width: 100%;
            color: #54698D;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.75px;
            line-height: 15px;
        }
        body .bPageTitle .ptBody .pageDescription {
            height: 27px;
            margin-left: 20px;
            display:inline-block;
            font-size: 24px;
            color: #0070D2 !important;            
        }
        
        body .bPageTitle{
            padding-top:0 !important;
        }

        body .bPageTitle #section_header{
            margin-top: 0px;
        }

        .pageTitleIcon{
            display: none !important;
        }

        .topicInput .input.ghost{
            width: 100%;
        }

        .topics.topic-vf{
            position: relative;
        }

        .topicInput .input {
            border: 0 !important;
            padding: 5px !important;
            margin: 7px 0 0 !important;
            float: left !important;
            outline: none !important;
            resize: none !important;
            width: 30px;
            overflow: hidden !important;
            outline: 0 !important;
            -webkit-box-shadow: none !important;
            -moz-box-shadow: none !important;
            box-shadow: none !important;
            height: 18px;

        }

        #topics-container-div .topics.init .standaloneTopicWidgetTitle{
            border-bottom: 0px;
        }
        #topics-container-div{
            padding-left:22px;
        }
        #topics-container-div .topics{
            margin-top: 0;
            margin-bottom: 0;
        }

        .record-type-change-link{
            color: #0088cc !important;
            margin-left: 8px;
        }

        #chatter .chatterfeedshell{
            overflow-x: hidden;
        }

        .button--warning{
            background-color: #ffb75d !important;
            color: white !important;
        }

        .button--danger{
            background-color: #c23934 !important;
            color: white !important;
        }
        .nav-tabs > .active > a, .nav-tabs > .active > a:hover{
            border: 0;
        }
        .nav-tabs > li > a:hover{
            border-color: transparent;
            background-color: transparent;
            border-bottom: 2px solid #2d95d6;
        }
        .nav-tabs > li.active > a:hover{
            border-bottom: 2px solid #2d95d6;
        }
        body .nav-tabs li.active > a {
            border: 0;
            padding-bottom: 0;
            text-transform: uppercase;
            color: #080707;
        }

        body .nav-tabs li > a {
            border: 0;
            padding-bottom: 0;
            text-transform: uppercase;
            font-size: 14px;
            line-height: 21px;
            letter-spacing: 0.875px;
            padding: 24px 16px 8px 16px;
            color: #54698D;
        }

        body .nav-tabs > li {
            margin-bottom: 0;
        }

        body .nav-tabs > li.active > a {
            border-bottom: 2px solid #2d95d6;
            padding: 24px 16px 8px 16px;
            color: #080707;
        }

        body .nav-tabs > li.active > a:focus {
            outline: none;
        }

        body .nav-tabs > li.active > a:active {
            outline: none;
        }

        body .nav-tabs a{
            cursor: pointer;
        }
        .modal-footer, .modal-footer a.button{
            user-select: none;
            -o-user-select:none;
            -moz-user-select: none;
            -khtml-user-select: none;
            -webkit-user-select: none;
        }
        .modal-footer a.button.disabled {
           pointer-events: none;
           cursor: default;
        }
        #topics-container-div{
            max-width: calc(100% - 22px);
        }
    </style>
    
    <!-- Enabled SFDC Components for controlling operations in Javascript, Jordan, 3/15/2012 -->
    <script type="text/javascript">
        var taggingEnabled = '{!taggingEnabled}';
    </script>
    <!-- //End Enabled components for controller operations -->
    
    <script type="text/javascript">
        var $j = jQuery.noConflict();
        //Monkey patch for inline editing on ios
        function getEventTarget(a) {return window.event&&a.srcElement?a.srcElement:a.target;}

        var labels={};

        labels['TaskRay_TaskModal_NoRepeatAvailable']= '{!JSENCODE($Label.TaskRay_TaskModal_NoRepeatAvailable)}';
        labels['TaskRay_TaskModal_NoRepeatAvailableLinkText']= '{!JSENCODE($Label.TaskRay_TaskModal_NoRepeatAvailableLinkText)}';
        labels['TaskRay_TaskModal_DayRepeatLabel']= '{!JSENCODE($Label.TaskRay_TaskModal_DayRepeatLabel)}';
        labels['TaskRay_TaskModal_WeekRepeatLabel']= '{!JSENCODE($Label.TaskRay_TaskModal_WeekRepeatLabel)}';
        labels['TaskRay_TaskModal_MonthRepeatLabel']= '{!JSENCODE($Label.TaskRay_TaskModal_MonthRepeatLabel)}';
        labels['TaskRay_TaskModal_YearRepeatLabel']= '{!JSENCODE($Label.TaskRay_TaskModal_YearRepeatLabel)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanationBase']='{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanationBase)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanationVariable']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanationVariable)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_month']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_month)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_months']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_months)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_day']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_day)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_days']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_days)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_year']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_year)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_years']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_years)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_every']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_every)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_week']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_week)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_until']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_until)}';
        labels['TaskRay_TaskModal_RepeatTaskExplanation_on']= '{!JSENCODE($Label.TaskRay_TaskModal_RepeatTaskExplanation_on)}';

        var pageicon = '{!URLFOR($Resource.trplugins, 'images/star32.png')}';
        function GetURLParameter(sParam)
        {
            var sPageURL = window.location.search.substring(1);
            var sURLVariables = sPageURL.split('&');
            for (var i = 0; i < sURLVariables.length; i++)
            {
                var sParameterName = sURLVariables[i].split('=');
                if (sParameterName[0] == sParam)
                {
                    return sParameterName[1];
                }
            }
        }
        //If there's a custom redirect url set, navigate to it.
        //This replaces .setRedirect(true);
        var customRedirectURL = '{!JSENCODE(customRedirectURL)}';
        if(customRedirectURL){
            var isDTPStr = (GetURLParameter('isdtp')) ? '&isdtp='+GetURLParameter('isdtp') : '';
            window.location.replace(customRedirectURL+isDTPStr);
            //We need to throw the exception so that code execution stops on this page, while we're loading the redirect page. If we don't we'll have problems with the standardcontroller extension being out of sync
            throw new Error('reloading...');
        }
        if(parent.runAddTagsDoNotClose){
            parent.runAddTagsDoNotClose=false;
            setTimeout(function(){
                if(pageHasErrorMsg() == false){
                    document.body.style.display='none';
                    parent.forceUpdateFromOutsideReact(function(){
                        parent.taskCreatedFromModal('{!JSENCODE(currentTask.Id)}');
                    });
                }
            }.bind(this),0);
        }

        /* Approval Process for future date  */
        

        $j(document).ready(function(){

            if(typeof(Ext) !== 'undefined'){parent.Ext = Ext;}

            //Setup topics
            var topicContainerId = $j('#topics-container-div .topics').attr('id');
            if(topicContainerId!=null){
                SfdcApp.TopicsFeed.applyHandlers(topicContainerId);
                //var topicContainerWidth = $j('#chatter').width();
                //$j('#topics-container-div').width(topicContainerWidth-60);
            }
            window.navigateToUrlNewTab=parent.window.navigateToUrlNewTab;
            window.srcUp = parent.window.navigateToUrlNewTab;
            //Watch for the stupid view and edit pageBlockButtons
            insertionQ('.lookupHoverDetailOverridable.lookupHoverDetail .detailList').every(function(element){
                var inputs = document.querySelectorAll('.lookupHoverDetailOverridable .pbButton input');
                for (var i = 0; i < inputs.length; ++i) {
                    var onclickAttrStr = inputs[i].getAttribute('onclick');
                    onclickAttrStr = onclickAttrStr.replace('navigateToUrl(','navigateToUrlNewTab(');
                    inputs[i].setAttribute('onclick',onclickAttrStr);
                }
                var anchors = document.querySelectorAll('.lookupHoverDetailOverridable a');
                for (var i = 0; i < anchors.length; ++i) {
                    anchors[i].setAttribute('target','_blank');
                }
            }.bind(this));

            //Set the checklist iframe

            //Resize the box and checklist iframes
            $j('#checklist-iframe').height($j(window).height()-172);
            $j('#box-iframe').height($j(window).height());
            parent.inlineEditsFromModal=false;
            attachInlineEditingForMobile();

            parseURLParamters();
            if($j('#checklist-iframe').attr('src') != parent.trChecklistPageURL+'?Id={!Project_Task__c.Id}'){
                //Service console
                if(parent.trChecklistPageURL.indexOf('?') !== -1){
                    $j('#checklist-iframe').attr('src',parent.trChecklistPageURL+'&Id={!Project_Task__c.Id}&noresize=true');
                } else{
                    $j('#checklist-iframe').attr('src',parent.trChecklistPageURL+'?Id={!Project_Task__c.Id}&noresize=true');
                }
            }

            showAppropriateTab();

            addWordBreakIfNeeded();

            //If the URL parameter has copyFrom parameter (added when "Clone" button is clicked in trStandardController), disable tabs.  It's in the clone window.
            var copyFrom = GetURLParameter('copyfrom');
            if(typeof(copyFrom) != 'undefined'){
                parent.setTabsToDisabled()
            }

            $j('.inlineEditWrite').on('dblclick',function(e){
                showEditButtonsFromInlineEdit();
            });

            $j('.dataCol input,select').on('focus click',function(e){
                focusedOnInput();
            });

            var taskId = '{!JSENCODE(currentTask.Id)}';
            if(taskId != ''){
                $j('.pageDescription').css('color','#0088cc');
                $j('.pageDescription').css('cursor','pointer');
                $j('.pageDescription').click(function(){
                    // window.open('/'+taskId, '_blank');
                    parent.popNewStdRecordTab(taskId);
                });
            } else{
                $j('#checklist-tab,#repeat-tab,#chatter-tab').removeAttr('data-toggle');
                $j('#checklist-tab,#repeat-tab,#chatter-tab').addClass('disabled-tab');
            }

            function focusedOnInput(){
                parent.inlineEditsFromModal=true;
            }

            $j('.modal-footer .button').click(function(e){
                $j(this).prop('disabled',true);
                $j(this).addClass('disabled');
            });

            function showEditButtonsFromInlineEdit(){
                $j('.inline-edit-toggle-btn').show();
                $j('.inline-edit-toggle-btn').css('display','inline-block');
                parent.inlineEditsFromModal=true;
                $j('.edit-btn,.delete-btn').hide();
                cloneButtonTextChange();
            }
            if({!editMode}){ cloneButtonTextChange(); }
            function cloneButtonTextChange(){
                $j('.save-and-copy-btn').text('{!JSENCODE($Label.TaskRay_TaskModal_SaveAndCloneBtnLabel)}');
            }

            $j('.fieldSet-OwnerId select').change(function(){
                showEditButtonsFromInlineEdit();
            });

            $j('.fieldSet-OwnerId input, input.fieldSet-OwnerId').focus(function(){
                showEditButtonsFromInlineEdit();
            });
            
            $j('#InlineEditDialog .zen-btn[value="OK"]').click(function(){
                addWordBreakIfNeeded();
            });

            if({!JSENCODE($CurrentPage.parameters.quickadd) == 'true'}){$j('.inline-edit-toggle-btn').show();$j('.inline-edit-toggle-btn').css('display','inline-block');}

            if($j('input[title=Owner]').length > 0 && $j('.errorM3').length == 0){
                parent.ownerName = $j('input[title=Owner]').val();  // save this incase 'cancel' without updating for sharing
            } 
        
            if({!closeDialog}){
                if(pageHasErrorMsg() == false){
                    parent.highlightFlag = true;
                    
                    parent.dialogOpen = false;
                    parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                    parent.columnViewLastEditedItem='{!JSENCODE(currentTask.Id)}';

                    parent.forceUpdateFromOutsideReact();
                    parent.closeModal(parent.modalIds.TASK_DETAIL_MODAL, '{!JSENCODE(currentTask.Id)}');
                }
            } else if({!refresh}){
                parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                parent.columnViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                // parent.manualDOMChangeExecuted();
                parent.forceUpdateFromOutsideReact();
            }

            if(GetURLParameter('copyfrom')!=null){
                // parent.initPage();
                parent.forceUpdateFromOutsideReact();
            }

            $j(document).on('click','a', function() {
                if($j(this).attr('href')!== undefined){
                    if($j(this).attr('href').indexOf('javascript')==-1 && $j(this).attr('href')!='#' && $j(this).attr('target')!='_self' && $j(this).attr('target')!='_blank')
                    {
                        window.open($j(this).attr('href'));
                        return false;
                    }
                }
            });
            /* Approval Process for future date
            if(pendingApproval=='true'){
                $j('.pendingDisable').attr('disabled','disabled');
                $j('.pendingDisable').attr('title','This task is pending approval and locked for editing.');
            }*/
            
            $j("#task-edit-content a[target!='_self']").each(function(element){ 
                var href = $j(this).attr('href');
                if(typeof(href) !== 'undefined'){
                    if(href.indexOf("http") >= 0)
                    {
                        if(href.indexOf("isdtp=p1")){
                            $j(this).attr('href',href.replace('isdtp%3Dp1',''));
                        }
                        $j(this).attr('target','_blank');
                    }
                }
            });
            
            // $j(this).find('.pageTitleIcon').attr('src',pageicon).css('height','32px');
            $j(this).find('.pageTitleIcon').remove();
            parent.currentlightboxtaskid = '{!JSENCODE(currentTask.Id)}'; //assign this first, will be reassigned if not current task;
            parent.dialogOpen = true;
            var loadlightboxtasklist = '{!JSENCODE(currentTask.List__c)}';
            
            $j(".dataCol span:contains('<a href=')").each(function(){
                $j(this).html($j(this).text());
            });
            
            $j(".save-btn").click(function(){
                var currentlightboxtasklist = $j('.List__c').val();
                if(loadlightboxtasklist!=currentlightboxtasklist && currentlightboxtasklist=='Finished')
                {
                //Call a remote action to reset the task sort order to 0
                parent.TASKRAY.trController.moveTaskToTopOfList('{!currentTask.Id}',function(event,result){
                        if (result.status) {             
                        }
                    });
                }
            });
            
            // restore any tags (inbetween form submission)
            if(parent.tagInput != null){
                $j('#tag-input').val(parent.tagInput);
            }
            
            /*
             *  
             */
            $j('.delete-btn').click(function(e){
                e.preventDefault();
                e.stopPropagation();
                //$j("#delete-confirm").modal('show');
                window.parent.openDeleteTaskConfirmation('{!JSENCODE(currentTask.Id)}','{!JSENCODE(currentTask.Name)}');
            });

            /* 
             *  add-tags-btn
             *  Adds the tags to a record
             *  Button is not displayed when a new task is being created
             */
            $j('#add-tags-btn').click(function(e){
                e.preventDefault();
                addTags(closeDialog);                
            });
    
            /*
             * Check to see if we're hitting button on a new task (that hasn't been saved yet)
             */
            $j('#tag-input').keypress(function(e){
                if (e.keyCode == 13) {
                    e.preventDefault();
                    if(!($j('#task-id').val() == '')){
                        addTags();
                    }
                    // hitting enter on an 'unsaved' project task (attempt to save)
                    // and than add tags, but don't close the dialog
                    else{
                        parent.tagInput = $j('#tag-input').val();   //store the tags until after the task is created
                        saveNewTaskNoClose();
                        parent.runAddTagsDoNotClose = true;
                    }
                }
            });
            
            /*
             * Because we ant to trigger default VisualForce validation, save the 'tags' 
             * portion of the form into the parent and restore it AFTER the page has
             * posted back
             */
            $j('.save-new-task-close-btn').click(function(e){
                e.preventDefault();
                parent.tagInput = $j('#tag-input').val();
                saveNewTaskClose();
                parent.closeModalOnNextRefresh=true;
            });

            $j('.save-new-task-noclose-btn').click(function(e){
                e.preventDefault();
                parent.tagInput = $j('#tag-input').val();
                saveNewTaskNoClose();
                parent.runAddTagsDoNotClose = true;
            });

            /* 
             *
             */
            $j('.chatterFollowUnfollow').click(function(e){
                parent.refreshTasks();
            });
            

            /*
             * once page has posted back (after attempting to save to server), check to see if a new record
             * has been created, and if so, add tags to it, or close the dialog
             */
            if({!addTagsAndCloseDialog} || parent.closeModalOnNextRefresh){
                parent.closeModalOnNextRefresh = false;
                // if($j('#tag-input').val()!=undefined){
                //     if($j('#tag-input').val().length > 0 && $j('#task-id').val() != ''){
                //         parent.TASKRAY.trController.addRecordSObjectTags($j('#tag-input').val().split(","),$j('#task-id').val(),function(event,result){
                //             if (result.status) {
                //                 parent.currentlightboxtaskid = $j('#task-id').val();
                //                 parent.updateListSortOrderOnHighlight='{!JSENCODE(currentTask.List__c)}';
                //                 parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                //                 parent.columnViewLastEditedItem='{!JSENCODE(newTaskId)}';
                //                 parent.highlightFlag = true;
                //                 parent.initPage();
                //                 parent.dialogOpen = false;
                //                 parent.tagInput = null;     //clear parent tag storage
                                
                //                 parent.$j('#task-modal').modal('hide');            
                //             }
                //         });
                //     }
                //     else if($j('#task-id').val() != ''){
                //         parent.currentlightboxtaskid = $j('#task-id').val();        
                //         parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                //         parent.updateListSortOrderOnHighlight='{!JSENCODE(currentTask.List__c)}';
                //         parent.columnViewLastEditedItem='{!JSENCODE(newTaskId)}';
                //         parent.highlightFlag = true;
                //         parent.initPage();
                //         parent.tagInput = null; //clear parent tag storage
                //         parent.dialogOpen = false;
                        
                //         parent.$j('#task-modal').modal('hide');
                //     }
                //     else{
                //         alert('no task id');
                //     }
                    
                // }
                // else{
                //     if(pageHasErrorMsg() == false){
                //         parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                //         parent.updateListSortOrderOnHighlight='{!JSENCODE(currentTask.List__c)}';
                //         parent.columnViewLastEditedItem='{!JSENCODE(newTaskId)}';
                //         parent.currentlightboxtaskid = $j('#task-id').val();        
                //         parent.highlightFlag = true;
                //         parent.initPage();
                //         parent.tagInput = null; //clear parent tag storage
                //         parent.dialogOpen = false;

                //         parent.$j('#task-modal').modal('hide');        
                //     }
                    
                // }

                if(pageHasErrorMsg() == false){
                    parent.planningViewLastEditedItem='{!JSENCODE(currentTask.Id)}';
                    parent.updateListSortOrderOnHighlight='{!JSENCODE(currentTask.List__c)}';
                    parent.columnViewLastEditedItem='{!JSENCODE(newTaskId)}';
                    parent.currentlightboxtaskid = $j('#task-id').val();        
                    parent.highlightFlag = true;
                    // parent.initPage(function(){
                    //     //Hack to refresh the plan view
                    //     if(parent.trCurrentView=='plan'){ 
                    //         parent.rePopulateCurrentView(function(){parent.afterBoardChange();});
                    //     }
                    // });
                    parent.tagInput = null; //clear parent tag storage
                    parent.dialogOpen = false;
                    // parent.manualDOMChangeExecuted();
                    parent.forceUpdateFromOutsideReact();
                    parent.closeModal(parent.modalIds.TASK_DETAIL_MODAL,$j('#task-id').val());
                    // parent.$j('#task-modal').modal('hide');        
                } 

                // if(parent.closeModalOnNextRefresh){
                //     parent.closeModalOnNextRefresh=false;
                //     parent.$j('#task-modal').modal('hide');
                // }
            }

            
            /*
             *  
             *  if we're not adding new tags as the page loads than we should hide the loading
             *  Modified to check for 'tagging' prior to running operations, Jordan, 3/15/2012
             *  Cleared the 'tag-input' if tagging enabled, Jordan, 3/31/2012 
             */
            // if(taggingEnabled == "true"){               
            //     if({!saveTaskAddTags}){
            //         $j('#task-tags-loading').hide();
            //     }
            //     else{
            //         $j('#tag-input').val('');   //clear the val
            //         if(!{!addTagsAndCloseDialog}){getCurrentTaskTags();}
            //         var copyFromTags='{!JSENCODE(copyFromTags)}';
            //         if(copyFromTags!=''){
            //             $j('#tag-input').val(copyFromTags);   
            //         }
            //     }
            // }
            
            $j('#publishersharebutton').click(function(e){
                if($j('#chatterFileStageTwo').is(':visible')){
                    // parent.initPage();
                    parent.forceUpdateFromOutsideReact();
                }
            });
            
                  // after saving the task without closing the dialog, add the tags
            if({!saveTaskAddTags} && $j('#task-id').val() != '' && parent.tagInput != null)
            {
                parent.currentlightboxtaskid = $j('#task-id').val();
                addTags();
                // parent.initPage();
                parent.forceUpdateFromOutsideReact();
            }
            
            /*
             *  Clicking the 'Confirm Delete' button
             */
             $j('#delete-confirm-btn').click(function(e){
                showLoadMask();
                // deleteTask();   // this is an action function
                parent.deleteTaskFromOutsideReact($j('#task-id').val(),function(){
                    deleteComplete();
                }.bind(this));
             });
             
            if({!editMode}){
                $j('.inline-edit-toggle-btn').show();
                $j('.inline-edit-toggle-btn').css('display','inline-block');
            }

             attachRepeatTaskMethods();

             attachRecordTypeChangeMethods();

             fadeInMsg();

            //Prevent form submission on enter keystroke
            $j('.lookupInput input').on('keydown',function(e){
                var code = e.keyCode || e.which;
                if(code==13){
                    e.stopPropagation();
                    e.preventDefault();
                    return false;
                }
            });
            if(GetURLParameter('tab') === 'chatter' && $j('#showFeedLink a:visible').length>0){
                $j('#showFeedLink a').click();
            }

        }); // end document.ready 
    
        function attachRecordTypeChangeMethods(){
            //Attach the change link
            $j('[field-path="RecordTypeId"]').append('<a class="record-type-change-link" href="javascript:changeRecordType();">Change</a>');
            //Select the appropriate record type
            $j('#record-type-select option[value="'+'{!JSENCODE(recordTypeIdForRecord)}'+'"').attr('selected','selected');
            //Attach the update record type method
            $j('#record-type-change-save-btn').click(function(){
                var recordToUpdate = '{!JSENCODE(currentTask.Id)}';
                var newRecordTypeId = $j('#record-type-select option:selected').attr('value');
                var updateObj={};
                updateObj[recordToUpdate]=newRecordTypeId;
                parent.TASKRAY.trTaskBoardController.updateRecordTypesOfRecords('TASKRAY__'+'Project_Task__c', updateObj,function(result,event){
                    // window.location.href = '/';
                    // var currentURL = window.location.href+'&1=1';
                    // console.log(currentURL);
                    // window.location.href = currentURL;
                    refreshPage();
                    // setTimeout(function(){cancelEdit();},2000);
                });
            });
        }

        function changeRecordType(){
            $j('#record-type-change').modal('show');
            var modalDialog = $j('#record-type-change');
            var minHeight = ($j(modalDialog).height() == 0) ? 200 : $j(modalDialog).height();
            $j(modalDialog).css('margin-top',(($j(window).height()-minHeight)/2)-275+'px');
        }

        function addTags(closeDialog){
            parent.TASKRAY.trController.addRecordSObjectTags($j('#tag-input').val().split(","),parent.currentlightboxtaskid,function(event,result){
            if (result.status) {
                (function(callback){
                $j('.project-task-tag').remove();
                $j('#task-tags-loading').show();
                getCurrentTaskTags();
                // parent.initPage();
                parent.forceUpdateFromOutsideReact();
                callback();
                })(function(){
                    $j('.project-task-tag').unbind('click');
                    attachTaskTagHandlers();
                });
            }
            parent.tagInput=null;
            });
            $j('#tag-input').val('');
        }
        
        /* 
         *  getCurrentTaskTags()
         *  The method got renamed in the parent controller class fixing, Jordan, 3/15/2012
         */
        function getCurrentTaskTags(){
            parent.TASKRAY.trController.recordsObjectTags(parent.currentlightboxtaskid, function(event,result){
                if(result.status)
                {
                    $j('#task-tags-loading').hide();
                    if (event.length > 0) {
                        $j.each(result.result, function(i, tag){
                            (i < event.length-1) ? $j('#tag-list').append('<span class="project-task-tag" id="' + tag.Id + '">' + tag.Name + '&nbsp;<span class="delete-tag-btn" id="'+tag.Id+'" style="display:none"><img src="{!URLFOR($Resource.trplugins, 'images/redxround.png')}"/></span>,&nbsp;</span>') : $j('#tag-list').append('<span class="project-task-tag" id="' + tag.Id + '">' + tag.Name + '&nbsp;<span id="'+tag.Id+'" class="delete-tag-btn" style="display:none"><img src="{!URLFOR($Resource.trplugins, 'images/redxround.png')}"/></span></span>');
                        });
                        $j('#tag-entry').css('margin-top','0px');
                        attachTaskTagHandlers();
                    }
                    else{
                      $j('#tag-entry').css('margin-top','-30px');
                    }
                }
            });
        }

        function attachTaskTagHandlers(){
            $j('.project-task-tag').hover(function(){
                $j(this).find('.delete-tag-btn').show();
                $j(this).unbind('click');
                $j(this).click(function(e){
                    e.preventDefault();
                    var tag = $j(this);
                    parent.TASKRAY.trController.deleteRecordSobjectTag($j(this).attr('id'),function(event,result){
                        $j(tag).remove();
                        if($j('.project-task-tag:visible')!=undefined){
                            if($j('.project-task-tag:visible').length == 0){
                                $j('#tag-entry').css('margin-top','-30px');
                            }
                        }
                        // parent.initPage();
                        parent.forceUpdateFromOutsideReact();
                   });
                });
            },
            function(){
                $j(this).find('.delete-tag-btn').hide();
                $j(this).click(function(){ return false; });
            });
        }
        
        function fadeInMsg(){
            var message='{!IF((message!='' && message != null),JSINHTMLENCODE(message), '')}';
            message=message.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/g, "");
            message = message.replace(new RegExp('undefined' + '$'), '');
            if(message!=""){
                $j('.editPage').prepend('<h4 style="margin-left:24px" class="project_task_message"></h4>');
                $j('.editPage .project_task_message').html($j('<div>').html(message).text());
                $j(".project_task_message").fadeOut(10000, function(){
                    //$j(this).remove();
                });
            }
        }

        function showLoadMask(callback) {
            $j("#canvasloader-container").empty();
            $j("#modal-backdrop-loadmask").show();
            $j("#canvasloader-container").show();
            var cl = new CanvasLoader('canvasloader-container');        
            cl.setColor('#0099ff');
            // default is '#000000'
            cl.setDiameter(84);
            // default is 40
            cl.setDensity(75);
            // default is 40
            cl.setRange(1);
            // default is 1.33
            cl.setFPS(26);
            // default is 24
            cl.show();
            // Hidden by default
            // This bit is only for positioning - not necessary
            $j("#canvasLoader").css('margin-top', ($j("#canvasLoader").outerHeight() / 2) * -1);
            $j("#canvasLoader").css('margin-left', ($j("#canvasLoader").outerWidth() / 2) * -1);
            $j("#canvasLoader").css('position','fixed');
            $j("#canvasLoader").css('top',$j(window).height()/2);
            $j("#canvasLoader").css('left',$j(window).width()/2);
            /*loaderObj.style.position = "absolute";
            loaderObj.style["top"] = cl.getDiameter() * -0.5 + "px";
            loaderObj.style["left"] = cl.getDiameter() * -0.5 + "px";*/
            
        }

        function clearLoadMask(callback){
            $j("#canvasloader-container").empty();
            $j("#modal-backdrop-loadmask").hide();
        }

        function attachRepeatTaskMethods(){

            hideRepeatIfNoDeadline();

            //Strip the null from the picklist
            var firstOpt = $j("select[id$='repeat_interval'] option:first");
            if(firstOpt.text().indexOf('-')!==-1){firstOpt.remove();}

            $j('#repeat-tab').on('shown', function (e) {
                showRepeatInterfaceForIntervalType();
            });

            $j("select[id$='repeat_interval']").change(function(){
                showRepeatInterfaceForIntervalType();
                regenerateVariableLabel();
            });

            $j("input[id$='repeat-every']").change(function(){
                regenerateVariableLabel();
            });

            $j("input[id$='repeat_end']").on('input',function(){
                regenerateVariableLabel();
            });
            
            $j(".repeat-weekday-opt").click(function(){
                regenerateVariableLabel();
            });

            //Generate the label if we have data already set
            if({!NOT(Project_Task__c.Repeat_Every__c==null)}){
                regenerateVariableLabel();
            }
        }

        function hideRepeatIfNoDeadline(){
            if('{!TASKRAY__Project_Task__c.TASKRAY__Deadline__c}' === ''){
                $j('.repeat-options').mask();
                $j('.repeat-options').children().hide();
                var goToDiv = $j('<div style="text-align:center;"/>');
                goToDiv.append('<span>'+labels['TaskRay_TaskModal_NoRepeatAvailable']+'</span><br /><br />');
                goToDiv.append('<a href="#" id="goToDeadline">'+labels['TaskRay_TaskModal_NoRepeatAvailableLinkText']+'</a>');
                $j('.repeat-options').append(goToDiv);
            }
            $j('#goToDeadline').click(function(){
                //$j('#tabs-container a:first').tab('show');
                $j('.modal-footer .edit-btn').click();
            });
        }

        function showRepeatInterfaceForIntervalType(){
            var selectedIndex = $j("select[id$='repeat_interval'] option:selected").index();
            $j('.repeat_interval_dependent_control').hide();
            if($j("input[id$='repeat-every']").val()===''){
                $j("input[id$='repeat-every']").val('1');
            }
            if(selectedIndex==0){
                //hide all
                $j("input[id$='repeat-every']").val('');
            } else if(selectedIndex ==1){
                //Daily
                $j('#repeat-every-suffix').text(labels['TaskRay_TaskModal_DayRepeatLabel']);
                $j('.repeat-every,.repeat-end-date').show();
            } else if(selectedIndex == 2){
                //Weekly
                $j('#repeat-every-suffix').text(labels['TaskRay_TaskModal_WeekRepeatLabel']);
                //Show the week select, repeat every, and end date
                 $j('.weekly-repeat,.repeat-every,.repeat-end-date').show();
            } else if(selectedIndex ==3){
                //Monthly
                $j('#repeat-every-suffix').text(labels['TaskRay_TaskModal_MonthRepeatLabel']);
                $j('.repeat-every,.repeat-end-date').show();
            } else {
                //yearly
                //show the repeat every and end date
                $j('#repeat-every-suffix').text(labels['TaskRay_TaskModal_YearRepeatLabel']);
                $j('.repeat-every,.repeat-end-date').show();
            }


        }

        function pageHasErrorMsg(){
            return !$j('.messageTable').length==0;
        }

        function regenerateVariableLabel(){
            var selectedIndex = $j("select[id$='repeat_interval'] option:selected").index();
            var everyCount = $j("input[id$='repeat-every']").val();
            var everyCountOrd = (everyCount == 1) ? '1' : parseInt(everyCount).ordinalize();
            if(isNaN(parseInt(everyCount))){everyCountOrd = '_';}
            var updateText=labels['TaskRay_TaskModal_RepeatTaskExplanationVariable']+' ';
            if(selectedIndex==0){
                //No repeat interval
                updateText=labels['TaskRay_TaskModal_RepeatTaskExplanationBase'];
            } else if(selectedIndex ==1){
                //Daily
                var suffixToUse = labels['TaskRay_TaskModal_RepeatTaskExplanation_day'];
                var tempStr = labels['TaskRay_TaskModal_RepeatTaskExplanation_every']+' '+everyCountOrd+' '+suffixToUse;
                updateText+=tempStr;
            } else if(selectedIndex == 2){
                //Weekly
                var selectedLabelArr = $j.map($j('.repeat-weekday-opt:checked').closest('label'),function(val, index){return $j(val).text()});
                var selectedLabelStr = selectedLabelArr.join(', ').replace(/(.*),(.*)$/, "$1 and $2");
            
                
                var suffixToUse = labels['TaskRay_TaskModal_RepeatTaskExplanation_week'];
                //updateText+=labels['TaskRay_TaskModal_RepeatTaskExplanation_every']+' '+everyCountOrd+' '+suffixToUse+' '+labels['TaskRay_TaskModal_RepeatTaskExplanation_on']+selectedLabelStr;
                updateText+=labels['TaskRay_TaskModal_RepeatTaskExplanation_every']+' '+everyCountOrd+' '+suffixToUse;
                
            } else if(selectedIndex ==3){
                //Monthly
                var suffixToUse = labels['TaskRay_TaskModal_RepeatTaskExplanation_month'];
                var tempStr = labels['TaskRay_TaskModal_RepeatTaskExplanation_every']+' '+everyCountOrd+' '+suffixToUse;
                updateText+=tempStr;
            } else {
                //yearly
                var suffixToUse = labels['TaskRay_TaskModal_RepeatTaskExplanation_year'];
                var tempStr = labels['TaskRay_TaskModal_RepeatTaskExplanation_every']+' '+everyCountOrd+' '+suffixToUse;
                updateText+=tempStr;
            }

            if($j.trim($j("input[id$='repeat_end']").val()).length>0){
                updateText+=' '+labels['TaskRay_TaskModal_RepeatTaskExplanation_until']+' '+$j("input[id$='repeat_end']").val();
            }

            $j('#repeat-task-variable-label').text(updateText+'.');
            
        }

        function deleteComplete(){
            if(parent.newTaskRayUI){
                clearLoadMask();
                parent.forceUpdateFromOutsideReact();
                parent.closeModal(parent.modalIds.TASK_DETAIL_MODAL, $j('#task-id').val());

                // parent.$j('#task-modal').modal('hide');
                // setTimeout(function(){parent.animateDeleteArr([$j('#task-id').val()]);},500);
            } else{
                clearLoadMask();
                parent.getSideBarUsersPhotos(function(){void(0)});
                // parent.$j('#task-modal').modal('hide');parent.highlightTaskRemove();
                parent.closeModal(parent.modalIds.TASK_DETAIL_MODAL,$j('#task-id').val());
                parent.highlightTaskRemove();
            }
        }
        function attachInlineEditingForMobile(){
            var action;
            $j('.inlineEditWrite,.inlineEditWriteOn').bind('touchend', function(event){
                   var now = new Date().getTime();
                   var lastTouch = $j(this).data('lastTouch') || now + 1;
                   var delta = now - lastTouch;
                   clearTimeout(action);
                   if(delta<500 && delta>0){
                        $j(this).trigger('dblclick');
                        // if(window.sfdcPage && window.sfdcPage.hasRun){sfdcPage.dblClickField(event, this);}
                   }else{
                           $j(this).data('lastTouch', now);
                           action = setTimeout(function(e){
                                   $j(this).trigger('click');
                                   clearTimeout(action);   // clear the timeout
                           }, 500, [event]);
                   }
                   $j(this).data('lastTouch', now);
                    return false;
            });
        }

        function parseURLParamters(){
            var tab = GetURLParameter('tab');
            if(tab != null){
                var tabToShow = $j('#tabs-container a[data-target="#'+tab+'"]');
                if(tabToShow.length!=0){
                    //$j('#tabs-container a[data-target="#'+tab+'"]').tab('show');
                }
            }
            var recordTypeId = GetURLParameter('RecordType');
            if(recordTypeId != null){
                $j('.fieldSet-RecordTypeId').val(recordTypeId.substring(0,15));
                if(GetURLParameter('quickadd')=='true'){
                    // $j('.fieldSet-RecordTypeId').prop('readonly','true');
                    $j('.fieldSet-RecordTypeId').addClass('disabled');
                    $j('.fieldSet-RecordTypeId option[value!="'+recordTypeId.substring(0,15)+'"]').prop('disabled','disabled');
                }
            }
            var showAttachmentUpload = GetURLParameter('showattachmentupload');
            window.reloadingFromOtherFrame=false;
            // console.log('parseURLParamters ran', tab);
            if(tab==='chatter' || (tab==='details' || tab===undefined)){
                window.onunload = function(e){
                    if(tab==='chatter'){
                        // console.log('trying to reload task details',window.reloadingFromOtherFrame);
                        if(window.parent.getElementByIdCS('task-details-frame') && window.parent.getElementByIdCS('task-details-frame').contentDocument && window.reloadingFromOtherFrame !== true){
                            try{
                                // console.log('running details reload');
                                // console.log(window.parent.getElementByIdCS('task-details-frame').src);
                                window.parent.getElementByIdCS('task-details-frame').contentWindow.reloadingFromOtherFrame = true;
                                // window.parent.getElementByIdCS('task-details-frame').contentDocument.location.reload(true);
                                window.parent.getElementByIdCS('task-details-frame').src = window.parent.getElementByIdCS('task-details-frame').src;
                            } catch(e){
                                console.log(e);
                            }
                        }
                    }
                    if(tab==='details' || tab===undefined){
                        // console.log('trying to reload task chatter',window.reloadingFromOtherFrame);
                        if(window.parent.getElementByIdCS('task-chatter-frame') && window.parent.getElementByIdCS('task-chatter-frame').contentDocument && window.reloadingFromOtherFrame !== true){
                            try{
                                // console.log('running chatter reload');
                                window.parent.getElementByIdCS('task-chatter-frame').contentWindow.reloadingFromOtherFrame = true;
                                // window.parent.getElementByIdCS('task-chatter-frame').contentDocument.location.reload(true);
                                // console.log(window.parent.getElementByIdCS('task-chatter-frame').src);
                                window.parent.getElementByIdCS('task-chatter-frame').src = window.parent.getElementByIdCS('task-chatter-frame').src;
                            } catch(e){
                                console.log(e);
                            }
                        }
                    }
                }
            }

            if(tab=='chatter' && typeof(showAttachmentUpload) !== 'undefined' && showAttachmentUpload!=='undefined' && showAttachmentUpload!=='false'){
                //click the file pane            
                $j('.publisherattachContentPost').click();
                //click the upload from computer button
                $j('#chatterUploadFileAction').click();
                //click the choose file button not working
                // $j('#chatterFile').click()
            }
            // var failedFileAttempt = GetURLParameter('');
        }

        function showAppropriateTab(){
            var tab = GetURLParameter('tab');
            if(tab != null){
                var tabToShow = $j('#tabs-container a[data-target="#'+tab+'"]');
                if(tabToShow.length!=0){
                    $j('#tabs-container a[data-target="#'+tab+'"]').tab('show');
                }
            }
        }

        function addWordBreakIfNeeded(){
            if($j('.detailList').width() > $j('.editPage').width()){
                $j('.dataCol span span').css('word-break','break-all');
            } else{
                //We need to check to see if a single column is crazy wide for safari I guess
                var maxWidth = 0;
                $j('.dataCol span span').each(function(){
                    var thisWidth = $j(this).width();
                    if(maxWidth<thisWidth){
                        maxWidth = thisWidth;
                    }
                });
                if(maxWidth > ($j('.editPage').width() /2 )){
                   $j('.dataCol span span').css('word-break','break-all'); 
                }
            }
        }

    </script>
    <style type="text/css">
        #details .helpButton label, #details .helpButtonOn label{
          display: inline;
        }
        input, textarea{
            width: auto;
        }
        select{
            width: auto;
        }
        select, textarea, input[type="text"], input[type="password"], input[type="datetime"], input[type="datetime-local"], input[type="date"], input[type="month"], input[type="time"], input[type="week"], input[type="number"], input[type="email"], input[type="url"], input[type="search"], input[type="tel"], input[type="color"], .uneditable-input{
            margin-bottom: 0px;
        }
        label{
            margin-top: 5px;
        }
        .dataCol input[type="checkbox"], .dataCol a{
            margin-top:6px;
        }
        .dataCol span span{
            /*margin-top:6px;*/
            /*display: inline-block*/;
            /*word-break: break-all;*/
        }
        #datePicker select{
            width: auto;
        }
        .modal-footer{
            padding-top: 6px !important;
            padding-bottom: 6px !important;
            margin-top: 20px;
        }
        .disabled{
            color: grey;
        }
        .disabled-tab{
            color: #ccc;
        }
    </style>

    <div id="task-edit-content" style="background-color: #fdfdfd;">
    <apex:pageMessages />
     <ul class="nav nav-tabs" id="tabs-container" style="display:none;">
        <li class="active"><a data-target="#details" data-toggle="tab">{!HTMLENCODE($Label.TaskRay_TaskModal_DetailTabLabel)}</a></li>
        <li><a id="chatter-tab" data-target="#chatter" data-toggle="tab">{!HTMLENCODE($Label.TaskRay_TaskModal_ChatterTabLabel)}</a></li>
        <li><a id="checklist-tab" data-target="#checklist" data-toggle="tab">{!HTMLENCODE($Label.TaskRay_TaskModal_ChecklistTabLabel)}</a></li>
        <li><a id="repeat-tab" data-target="#repeat" data-toggle="tab">{!HTMLENCODE($Label.TaskRay_TaskModal_RepeatTabLabel)}</a></li>
        <apex:outputPanel rendered="{!boxExtPackInstalled}" layout="none">
            <li id="boxintegration-tab"><a data-target="#boxintegration" data-toggle="tab" target="_self">Box</a></li>
        </apex:outputPanel>
    </ul>
    <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="details">
            <div id="topics-container-div">
                <topics:widget entity="{!currentTask.Id}" />
            </div>
            <apex:form >
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.Name}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.OwnerId}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Project__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Deadline__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__List__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Repeat_Interval_Type__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Repeat_Every__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Repeat_End_Date__c}" />
            <apex:outputField rendered="FALSE" value="{!TASKRAY__Project_Task__c.TASKRAY__Repeat_Week_Days__c}" />
            
            
            <input type="hidden" id="task-id" value="{!TASKRAY__Project_Task__c.Id}" />
            <apex:actionFunction name="saveNewTaskClose" action="{!saveAndAddTags}" />
            <apex:actionFunction name="saveNewTaskNoClose" action="{!saveAndDontClose}" />
            <apex:actionFunction name="deleteTask" action="{!deleteTask}" oncomplete="deleteComplete();"></apex:actionFunction>
            <apex:actionFunction name="refreshPage" action="{!refresh}" />

            <apex:pageBlock title="" mode="edit" id="task-details">
                    
                    <apex:pageBlockSection title="" showHeader="false" columns="2">
                    
                        <apex:repeat value="{!fieldsetFields}" var="f">
                            <!-- <apex:outputPanel rendered="{!f=='Owner' && $ObjectType.Project_Task__c.updateable}" layout="none">
                                <apex:inputField value="{!currentTask[f]}" />
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!NOT(f=='Owner') || NOT($ObjectType.Project_Task__c.updateable)}"  layout="none">
                                <apex:outputField value="{!currentTask[f]}" rendered="{!NOT(CONTAINS(f.FieldPath,'__r'))}"><apex:inlineEditSupport disabled="{!NOT($ObjectType.Project_Task__c.updateable)}" showOnEdit="cancel-command-link,inline-save-command-link"/></apex:outputField>
                            </apex:outputPanel> -->
                            
                            <!-- Edit mode -->
                                <apex:inputField value="{!currentTask[f]}" styleClass="fieldSet-{!f}" rendered="{!NOT(newTask) && editMode && NOT(CONTAINS(f.FieldPath,'__r'))}" required="{!f.Required}" />
                                <apex:outputField value="{!currentTask[f]}" rendered="{!editMode && CONTAINS(f.FieldPath,'__r')}"></apex:outputField>
                            <!-- End Edit Mode -->

                            <!-- no edit mode -->
                                <apex:inputField value="{!currentTask[f]}" styleClass="fieldSet-{!f}" rendered="{!(NOT(editMode) && (f=='OwnerId' && $ObjectType.Project_Task__c.updateable)) || (NOT(CONTAINS(f.FieldPath,'__r')) && newTask) }" required="{!f.Required}" />
                                <apex:outputField value="{!currentTask[f]}" html-field-path="{!HTMLENCODE(f.FieldPath)}" rendered="{!(NOT(editMode) && f!='OwnerId') || (NOT($ObjectType.TASKRAY__Project_Task__c.updateable))}" ><apex:inlineEditSupport disabled="{!NOT($ObjectType.TASKRAY__Project_Task__c.updateable) || CONTAINS(f.FieldPath,'__r')}"></apex:inlineEditSupport></apex:outputField>
                            <!-- end no edit mode

                                <!-- <apex:inputField value="{!currentTask[f]}" styleClass="fieldSet-{!f}" rendered="{!editMode || ((f=='OwnerId' && $ObjectType.Project_Task__c.updateable) || (NOT(CONTAINS(f.FieldPath,'__r')) && newTask ))}" required="{!f.Required}" />
                                <apex:outputField value="{!currentTask[f]}" rendered="{!NOT(editMode) && ((NOT(CONTAINS(f.FieldPath,'__r')) && f!='OwnerId' && NOT(newTask)) || (NOT($ObjectType.Project_Task__c.updateable) && NOT(CONTAINS(f.FieldPath,'__r')) && NOT(newTask) ))}" ><apex:inlineEditSupport disabled="{!NOT($ObjectType.Project_Task__c.updateable)}"></apex:inlineEditSupport></apex:outputField> -->
                        </apex:repeat>
                    </apex:pageBlockSection>
                    <!-- <apex:pageBlockSection showHeader="false" title="Public Tags" columns="1" rendered="{!taggingEnabled}">
                        <div id="tag-existing">
                            <h2 class="tag-title"><img src="{!URLFOR($Resource.trplugins, 'images/tags32.png')}" alt=""/>Tags</h2>
                            <div id="tag-list"><span id="task-tags-loading"><img src="{!URLFOR($Resource.trPlugins, 'images/ajax.gif')}"/>&nbsp;<em>Loading Tags...</em></span></div>
                            <span class="delete-x" style="display:none;"></span>
                            <div style="clear:both;"></div>
                        </div>
                        <div id="tag-entry">
                            <input type="text" id="tag-input" placeHolder="Enter new tags separated by a comma..."/>
                            <input type="button" id="add-tags-btn" value="Add"/>
                        </div>
                    </apex:pageBlockSection> -->

                    <!-- <apex:pageBlockButtons location="top"> -->
                    <div class="modal-footer" style="background-color: transparent; border-top: 0; margin-top: 0;">
                        <!-- Edit button -->
                        <apex:commandLink id="edit" action="{!changeForm}" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_editlabel)}" styleclass="button button--neutral edit-btn" rendered="{!(NOT(editMode) && userEditAccess && $ObjectType.TASKRAY__Project_Task__c.updateable)}" />
                        <!-- new task save button -->
                        <apex:commandLink onClick="$j('body').trigger('click');" id="save-new-task-noclose-btn" styleclass="inline-edit-toggle-btn button button--neutral save-new-task-noclose-btn save-btn" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_savelabel)}" reRender="noRefresh" rendered="{!newTask}" />
                        <!-- existing task save button -->
                        <apex:commandLink onClick="$j('body').trigger('click');" id="inline-save-command-link" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_savelabel)}" styleclass="inline-edit-toggle-btn button button--neutral" action="{!saveAndDontClose}" rendered="{!NOT(newTask)}" ></apex:commandLink>
                        <!-- new task save and close button -->
                        <apex:commandLink onClick="$j('body').trigger('click');" id="save-new-task-close-btn" styleclass="inline-edit-toggle-btn save-new-task-close-btn save-btn button button--brand" value="{!JSENCODE($Label.taskray__taskray_infomodal_saveandcloselabel)}" reRender="noRefresh" rendered="{!newTask}" />
                        <!-- existing task save and close button -->
                        <apex:commandLink onClick="$j('body').trigger('click');" id="save-and-close-btn" styleclass="inline-edit-toggle-btn button button--brand save-btn" action="{!saveAndClose}" value="{!JSENCODE($Label.taskray__taskray_infomodal_saveandcloselabel)}" rendered="{!NOT(newTask)}" />
                        
                        <!-- Approval Process for future date <apex:commandButton disabled="{!pendingApproval}" id="edit" action="{!changeForm}" styleClass="pendingDisable" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_editlabel)}" rendered="{!(NOT(editMode) && userAccess && $ObjectType.Project_Task__c.updateable)}" /> -->
                        <!-- both existing and new task save and clone -->
                        <apex:commandLink onClick="$j('body').trigger('click');" id="save-and-copy-task-btn" action="{!saveAndCopyNoClose}" styleclass="button button--neutral save-and-copy-new-task-btn save-and-copy-btn" value="{!HTMLENCODE($Label.taskray__taskray_taskmodal_clonebtnlabel)}" rendered="{!$ObjectType.TASKRAY__Project_Task__c.createable}"/>

                        <!-- cancel button -->
                        <apex:commandLink id="cancel-command-link-new" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_cancellabel)}" styleclass="inline-edit-toggle-btn button button--neutral" rendered="{!newTask}" onClick="parent.closeModal(parent.modalIds.TASK_DETAIL_MODAL, null);" ></apex:commandLink>
                        <apex:commandLink id="cancel-command-link" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_cancellabel)}" styleclass="inline-edit-toggle-btn button button--neutral" rendered="{!NOT(newTask)}" action="{!cancelEdit}"></apex:commandLink>
                        <!-- delete button-->
                        <apex:commandLink styleClass="delete-btn button button--neutral button--danger" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_deletelabel)}" reRender="noRefresh" rendered="{!(NOT(editMode) && NOT(newTask) && userAllAccess && $ObjectType.TASKRAY__Project_Task__c.deletable)}"/>
                        <!-- Added $ObjectType.Project_Task__c.deletable check, Jordan, 2/28/2012-->
                        <!-- Approval Process for future date <apex:commandButton disabled="{!pendingApproval}" styleClass="delete-btn pendingDisable" value="Delete" rendered="{!(NOT(newTask) && userAccess && $ObjectType.Project_Task__c.deletable)}"/> -->

                        <!-- Approval Process for future date <apex:commandButton styleClass="submit-for-approval" action="{!submitProjectTaskForApproval}" value="Submit For Approval" rendered="{!AND(NOT(pendingApproval),displayApprovalButton)}"/> -->
                    </div>
                    <!-- </apex:pageBlockButtons> -->
                </apex:pageBlock>
            </apex:form>
        </div>
        <!-- end details tab -->

        <!-- Start Chatter Tab -->
        <div class="tab-pane fade in" id="chatter" style="width:100%">
            <chatter:feedWithFollowers entityId="{!currentTask.Id}"></chatter:feedWithFollowers>
        </div>
        <!-- End Chatter Tab -->

        <!-- Start Repeat Tab -->

        <div class="tab-pane fade in" id="repeat" style="width:100%">
            <apex:form styleClass="form-horizontal">
                <div class="alert alert-info" id="repeat-task-variable-label">{!HTMLENCODE($Label.taskray__taskray_taskmodal_repeattaskexplanationbase)}</div>
                    <div class="repeat-options">
                        <div class="control-group">
                            <label class="control-label repeat_interval_label" for="repeat_interval">{!HTMLENCODE($Label.taskray__taskray_taskmodal_repeatintervallabel)}</label>
                            <div class="controls">
                                <!-- <apex:selectList id="repeat_interval" size="1" value="{!currentTask.TASKRAY__Repeat_Interval_Type__c}">
                                    <apex:selectOptions value="{!intervalTypeOpts}" />
                                </apex:selectList> -->
                                <apex:inputField id="repeat_interval" value="{!currentTask.TASKRAY__Repeat_Interval_Type__c}"></apex:inputField>
                            </div>
                        </div>
                        <div class="control-group repeat-every repeat_interval_dependent_control">
                            <label class="control-label repeat_every_label">{!HTMLENCODE($Label.taskray__taskray_taskmodal_repeatlabel)}</label>
                            <div class="controls">
                                <apex:inputField id="repeat-every" value="{!currentTask.TASKRAY__Repeat_Every__c}"/> <span id="repeat-every-suffix"></span>
                            </div>
                        </div>

                         <!-- <div class="control-group weekly-repeat repeat_interval_dependent_control">


                            <div class="controls"><label class="checkbox inline"><apex:inputCheckbox value="{!weekDay1}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[0])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay2}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[1])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay3}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[2])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay4}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[3])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay5}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[4])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay6}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[5])}</label>
                            <label class="checkbox inline"><apex:inputCheckbox value="{!weekDay7}" styleClass="repeat-weekday-opt"/> {!HTMLENCODE(dayNames[6])}</label></div>
                        </div> -->

                        <!-- start dates / end dates -->
                        <div class="control-group repeat-end-date repeat_interval_dependent_control">
                            <label class="control-label" for="repeat_end">{!HTMLENCODE($Label.TaskRay_TaskModal_RepeatEndLabel)}</label>
                            <div class="controls">
                                <apex:inputField id="repeat_end" value="{!currentTask.TASKRAY__Repeat_End_Date__c}" onchange="regenerateVariableLabel();" />
                            </div>
                        </div>

                    </div>    
                <div class="modal-footer">
                        <apex:commandLink id="save-recurrence-btn" styleclass="button button--neutral save-recurrence-btn" action="{!updateRepeatTaskInfo}" value="{!HTMLENCODE($Label.taskray__taskray_infomodal_savelabel)}"/>
                        <apex:commandLink id="save-and-close-btn" styleclass="button button--brand save-btn" action="{!updateRepeatTaskInfoAndClose}" value="{!JSENCODE($Label.taskray__taskray_infomodal_saveandcloselabel)}"/>
                </div>
            </apex:form>
        </div>

        <!-- End Repeat Tab -->

        <!-- Start conditional box tab -->
        <apex:outputPanel rendered="{!boxExtPackInstalled}" layout="none">
            <div class="tab-pane fade in" id="boxintegration" style="width:100%;height:100%;">
                <iframe id="box-iframe" src="{!HTMLENCODE(baseSFURL)}/apex/c__task_box_integration?Id={!TASKRAY__Project_Task__c.Id}" style="border: 0; width: 100%; margin-bottom: 8px;"></iframe>
            </div>
        </apex:outputPanel>
        <!-- End conditional box tab -->
    </div>
        


    <!-- Modals -->
    <div id="delete-confirm" class="modal" style="display:none;margin-top:-75px;">
        <div class="modal-header">{!HTMLENCODE($Label.TaskRay_TaskModal_DeleteHeader)}</div>
        <div class="modal-body">
        {!HTMLENCODE($Label.TaskRay_TaskModal_DeleteBody)}
        </div>
        <div class="modal-footer">
            <a id="delete-confirm-btn" href="#" class="button button--neutral button--danger">{!HTMLENCODE($Label.taskray__taskray_infomodal_deletelabel)}</a>
            <a onclick="$j('#delete-confirm').modal('hide');" href="#" class="button button--neutral">{!HTMLENCODE($Label.taskray__taskray_infomodal_cancellabel)}</a>
        </div>
    </div>

    <div id="record-type-change" class="modal" style="display:none;">
        <div class="modal-header">{!HTMLENCODE($Label.TaskRay_TaskModal_RecordTypeChangeHeader)}</div>
        <div class="modal-body">
        <span>{!HTMLENCODE($Label.TaskRay_TaskModal_RecordTypeChangeWarningText)}</span>
        <br />
        <br />
        <select id="record-type-select">
            <apex:repeat value="{!availableRecordTypes}" var="rt">
                <option value="{!HTMLENCODE(rt.id)}">{!HTMLENCODE(rt.label)}</option>
            </apex:repeat>
        </select>
        <br />
        </div>
        <div class="modal-footer">
            <a onclick="$j('#record-type-change').modal('hide');" href="#" class="button button--neutral">{!HTMLENCODE($Label.taskray__taskray_infomodal_cancellabel)}</a>
            <a id="record-type-change-save-btn" href="#" class="button button--neutral button--warning">{!HTMLENCODE($Label.taskray__taskray_infomodal_savelabel)}</a>
        </div>
    </div>
</div>  

<div id="canvasloader-container" class="wrapper"></div>
<div id="modal-backdrop-loadmask" class="modal-backdrop in" style="display:none;"></div>
<script>
    //This fixes an issue with Visualforce inline help text.
    //Previously the VF was somehow coming up with a null id for each inputField when it injected the .helpButton (with inline js)
    //What this is doing is going over each field, finding the dom node it should be on, looking to see if there is a help button
    //If there is a help button update the id of the help element to match what is injected into the sfdcPage.setHelp handler
    var i =0;
    <apex:repeat value="{!fieldsetFields}" var="f">
        <apex:outputPanel rendered="{!NOT(CONTAINS(f,'__r'))}" layout="none">
        sfdcPage.setHelp('{!f}','{!JSENCODE($ObjectType.TASKRAY__Project_Task__c.fields[f].inlineHelpText)}');
        var thElement = $j('.detailList tbody tr:nth-child('+(1+parseInt(Math.floor(i/2)))+') th:nth-child('+(i%2 === 0 ? 1 : 3)+')');
        var helpElement = thElement.find('.helpButton');
        helpElement.attr('id','{!f}-_help');
        </apex:outputPanel>
        i++;
    </apex:repeat>
</script>
</apex:page>